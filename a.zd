# Begin code block cb_1
:lbl_from_2:
# IR: MOV var_18__adr_scr imm_19
mov EAX, 67536;
mov *var_18__adr_scr, EAX;
# IR: MOV var_20__scr_I imm_21
mov EAX, 0;
mov *var_20__scr_I, EAX;
# IR: MOV var_22__alloc_p imm_23
mov EAX, 10000;
mov *var_22__alloc_p, EAX;
# IR: MOV var_24__n_tiles_x imm_25
mov EAX, 56;
mov *var_24__n_tiles_x, EAX;
# IR: MOV var_26__n_tiles_y imm_27
mov EAX, 36;
mov *var_26__n_tiles_y, EAX;
# IR: CALL func_4__main [ ] tmp_28
call func_4__main;
add ESP, 0;
mov *tmp_28, eax;
# IR: CALL func_5__print [ imm_32 imm_31 imm_30 imm_29 ] tmp_33
push imm_29;
push 255;
push 0;
push 0;
call func_5__print;
add ESP, 16;
mov *tmp_33, eax;
# IR: CALL func_7__infloop [ ] tmp_34
call func_7__infloop;
add ESP, 0;
mov *tmp_34, eax;
:lbl_to_3:
# End code block cb_1
# Begin code block cb_35
:func_4__main:
# IR: ENTER scp_38__NULL
sub ESP, 99;
# IR: CALL func_5__print [ imm_42 imm_41 imm_40 imm_39 ] tmp_43
push imm_39;
push 128;
push 255;
push 0;
call func_5__print;
add ESP, 16;
mov EBP[-19], eax;
# IR: CALL func_9__alloc [ imm_45 ] tmp_46
push 10;
call func_9__alloc;
add ESP, 4;
mov EBP[-31], eax;
# IR: MOV var_44__args tmp_46
mov EAX, EBP[-31];
mov EBP[-23], EAX;
# IR: OP INDEX var_44__args imm_47 tmp_48
mov EAX, EBP[-23];
mov EBX, 0;
mul EAX, 4;
add EAX, EBX;
mov EBP[-39], EAX;
# IR: MOV tmp_48 imm_49
mov EAX, imm_49;
mov EBX, EBP[-39];
mov *EBX, EAX;
# IR: OP INDEX var_44__args imm_50 tmp_51
mov EAX, EBP[-23];
mov EBX, 1;
mul EAX, 4;
add EAX, EBX;
mov EBP[-51], EAX;
# IR: MOV tmp_51 imm_52
mov EAX, 123;
mov EBX, EBP[-51];
mov *EBX, EAX;
# IR: CALL func_17__printf [ var_44__args imm_53 ] tmp_54
push imm_53;
push EBP[-23];
call func_17__printf;
add ESP, 8;
mov EBP[-63], eax;
# IR: OP INDEX var_44__args imm_55 tmp_56
mov EAX, EBP[-23];
mov EBX, 0;
mul EAX, 4;
add EAX, EBX;
mov EBP[-71], EAX;
# IR: CALL func_11__strlen [ imm_57 ] tmp_58
push imm_57;
call func_11__strlen;
add ESP, 4;
mov EBP[-79], eax;
# IR: MOV tmp_56 tmp_58
mov EAX, EBP[-79];
mov EBX, EBP[-71];
mov *EBX, EAX;
# IR: CALL func_17__printf [ var_44__args imm_59 ] tmp_60
push imm_59;
push EBP[-23];
call func_17__printf;
add ESP, 8;
mov EBP[-87], eax;
# IR: CALL func_17__printf [ var_44__args imm_61 ] tmp_62
push imm_61;
push EBP[-23];
call func_17__printf;
add ESP, 8;
mov EBP[-95], eax;
# IR: LEAVE
sub ESP, -99;
ret;
:lbl_to_37:
# End code block cb_35
# Begin code block cb_63
:func_5__print:
# IR: ENTER scp_66__NULL
sub ESP, 39;
# IR: MOV var_71__i imm_72
mov EAX, 0;
mov EBP[-3], EAX;
# IR: OP INDEX var_70__str imm_74 tmp_75
mov EAX, EBP[21];
mov EBX, 0;
mul EAX, 1;
add EAX, EBX;
mov EBP[-19], EAX;
# IR: MOV var_73__c tmp_75
mov EAX, EBP[-19];
mov EAX, *EAX;
mov EBP[-11], EAX;
# IR: WHILE cb_78 var_73__c cb_81 lbl_76__while_next lbl_77__while_end
:lbl_76__while_next:
# Begin code block cb_78
:lbl_from_79:
:lbl_to_80:
# End code block cb_78
mov EAX, 0;
cmp EBP[-11], EAX;
jz lbl_77__while_end;
# Begin code block cb_81
:lbl_from_82:
# IR: CALL func_6__putch [ var_67__b var_68__g var_69__r var_73__c ] tmp_84
push EBP[-11];
push EBP[17];
push EBP[13];
push EBP[9];
call func_6__putch;
add ESP, 16;
mov EBP[-23], eax;
# IR: OP INC var_71__i none tmp_85
mov EAX, EBP[-3];
mov EBP[-27], EAX;
inc EBP[-3];
# IR: OP INDEX var_70__str var_71__i tmp_86
mov EAX, EBP[21];
mov EBX, EBP[-3];
mul EAX, 1;
add EAX, EBX;
mov EBP[-31], EAX;
# IR: MOV var_73__c tmp_86
mov EAX, EBP[-31];
mov EAX, *EAX;
mov EBP[-11], EAX;
:lbl_to_83:
# End code block cb_81
jmp lbl_76__while_next;
:lbl_77__while_end:
# IR: LEAVE
sub ESP, -39;
ret;
:lbl_to_65:
# End code block cb_63
# Begin code block cb_112
:func_7__infloop:
# IR: ENTER scp_115__NULL
sub ESP, 11;
# IR: WHILE cb_118 imm_121 cb_122 lbl_116__while_next lbl_117__while_end
:lbl_116__while_next:
# Begin code block cb_118
:lbl_from_119:
:lbl_to_120:
# End code block cb_118
mov EAX, 0;
cmp 1, EAX;
jz lbl_117__while_end;
# Begin code block cb_122
:lbl_from_123:
:lbl_to_124:
# End code block cb_122
jmp lbl_116__while_next;
:lbl_117__while_end:
# IR: LEAVE
sub ESP, -11;
ret;
:lbl_to_114:
# End code block cb_112
# Begin code block cb_125
:func_9__alloc:
# IR: ENTER scp_128__NULL
sub ESP, 11;
# IR: MOV var_130__res var_22__alloc_p
mov EAX, *var_22__alloc_p;
mov EBP[-3], EAX;
# IR: OP ADD var_22__alloc_p var_129__size tmp_131
mov EAX, *var_22__alloc_p;
mov EBX, EBP[9];
add EAX, EBX;
mov EBP[-7], EAX;
# IR: MOV var_22__alloc_p tmp_131
mov EAX, EBP[-7];
mov *var_22__alloc_p, EAX;
# IR: RETURN var_130__res
mov EAX, EBP[-3];
sub ESP, -11;
ret;
# IR: LEAVE
sub ESP, -11;
ret;
:lbl_to_127:
# End code block cb_125
# Begin code block cb_154
:func_17__printf:
# IR: ENTER scp_157__NULL
sub ESP, 219;
# IR: MOV var_160__I imm_161
mov EAX, 0;
mov EBP[-3], EAX;
# IR: MOV var_162__argI imm_163
mov EAX, 0;
mov EBP[-11], EAX;
# IR: OP INDEX var_159__fmt var_160__I tmp_165
mov EAX, EBP[13];
mov EBX, EBP[-3];
mul EAX, 1;
add EAX, EBX;
mov EBP[-23], EAX;
# IR: MOV var_164__c tmp_165
mov EAX, EBP[-23];
mov EAX, *EAX;
mov EBP[-19], EAX;
# IR: MOV var_166__arg imm_167
mov EAX, 0;
mov EBP[-27], EAX;
# IR: WHILE cb_170 var_164__c cb_173 lbl_168__while_next lbl_169__while_end
:lbl_168__while_next:
# Begin code block cb_170
:lbl_from_171:
:lbl_to_172:
# End code block cb_170
mov EAX, 0;
cmp EBP[-19], EAX;
jz lbl_169__while_end;
# Begin code block cb_173
:lbl_from_174:
# IR: OP INC var_160__I none tmp_176
mov EAX, EBP[-3];
mov EBP[-35], EAX;
inc EBP[-3];
# IR: OP INDEX var_159__fmt var_160__I tmp_178
mov EAX, EBP[13];
mov EBX, EBP[-3];
mul EAX, 1;
add EAX, EBX;
mov EBP[-43], EAX;
# IR: MOV var_177__c2 tmp_178
mov EAX, EBP[-43];
mov EAX, *EAX;
mov EBP[-39], EAX;
# IR: IF cb_179 var_177__c2 cb_182
# Begin code block cb_179
:lbl_from_180:
:lbl_to_181:
# End code block cb_179
mov EAX, 0;
cmp EBP[-39], EAX;
jz lbl_256__if_else;
# Begin code block cb_182
:lbl_from_183:
# IR: OP INDEX imm_186 imm_187 tmp_188
mov EAX, imm_186;
mov EBX, 0;
mul EAX, 1;
add EAX, EBX;
mov EBP[-59], EAX;
# IR: OP EQUAL var_164__c tmp_188 tmp_189
mov EAX, EBP[-19];
mov ECX, EBP[-59];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-63], EAX;
# IR: MOV var_185__is_perc tmp_189
mov EAX, EBP[-63];
mov EBP[-47], EAX;
# IR: OP INDEX imm_191 imm_192 tmp_193
mov EAX, imm_191;
mov EBX, 0;
mul EAX, 1;
add EAX, EBX;
mov EBP[-79], EAX;
# IR: OP EQUAL var_164__c tmp_193 tmp_194
mov EAX, EBP[-19];
mov ECX, EBP[-79];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-83], EAX;
# IR: MOV var_190__is_bsl tmp_194
mov EAX, EBP[-83];
mov EBP[-67], EAX;
# IR: OP ADD var_185__is_perc var_190__is_bsl tmp_196
mov EAX, EBP[-47];
mov EBX, EBP[-67];
add EAX, EBX;
mov EBP[-91], EAX;
# IR: MOV var_195__is_spec tmp_196
mov EAX, EBP[-91];
mov EBP[-87], EAX;
# IR: IF cb_197 var_195__is_spec cb_200
# Begin code block cb_197
:lbl_from_198:
:lbl_to_199:
# End code block cb_197
mov EAX, 0;
cmp EBP[-87], EAX;
jz lbl_259__if_else;
# Begin code block cb_200
:lbl_from_201:
# IR: OP INC var_160__I none tmp_203
mov EAX, EBP[-3];
mov EBP[-95], EAX;
inc EBP[-3];
# IR: IF cb_204 tmp_210 cb_211
# Begin code block cb_204
:lbl_from_205:
# IR: OP INDEX imm_207 imm_208 tmp_209
mov EAX, imm_207;
mov EBX, 0;
mul EAX, 1;
add EAX, EBX;
mov EBP[-107], EAX;
# IR: OP EQUAL var_177__c2 tmp_209 tmp_210
mov EAX, EBP[-39];
mov ECX, EBP[-107];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-111], EAX;
:lbl_to_206:
# End code block cb_204
mov EAX, 0;
cmp EBP[-111], EAX;
jz lbl_262__if_else;
# Begin code block cb_211
:lbl_from_212:
# IR: OP INDEX var_158__args var_162__argI tmp_214
mov EAX, EBP[9];
mov EBX, EBP[-11];
mul EAX, 4;
add EAX, EBX;
mov EBP[-115], EAX;
# IR: MOV var_166__arg tmp_214
mov EAX, EBP[-115];
mov EAX, *EAX;
mov EBP[-27], EAX;
# IR: OP ADD var_162__argI imm_215 tmp_216
mov EAX, EBP[-11];
mov EBX, 4;
add EAX, EBX;
mov EBP[-123], EAX;
# IR: MOV var_162__argI tmp_216
mov EAX, EBP[-123];
mov EBP[-11], EAX;
# IR: CALL func_15__prints [ var_166__arg ] tmp_217
push EBP[-27];
call func_15__prints;
add ESP, 4;
mov EBP[-127], eax;
:lbl_to_213:
# End code block cb_211
jmp lbl_263__if_end;
:lbl_262__if_else:
:lbl_263__if_end:
# IR: IF cb_218 tmp_224 cb_225
# Begin code block cb_218
:lbl_from_219:
# IR: OP INDEX imm_221 imm_222 tmp_223
mov EAX, imm_221;
mov EBX, 0;
mul EAX, 1;
add EAX, EBX;
mov EBP[-139], EAX;
# IR: OP EQUAL var_177__c2 tmp_223 tmp_224
mov EAX, EBP[-39];
mov ECX, EBP[-139];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-143], EAX;
:lbl_to_220:
# End code block cb_218
mov EAX, 0;
cmp EBP[-143], EAX;
jz lbl_265__if_else;
# Begin code block cb_225
:lbl_from_226:
# IR: OP INDEX var_158__args var_162__argI tmp_228
mov EAX, EBP[9];
mov EBX, EBP[-11];
mul EAX, 4;
add EAX, EBX;
mov EBP[-147], EAX;
# IR: MOV var_166__arg tmp_228
mov EAX, EBP[-147];
mov EAX, *EAX;
mov EBP[-27], EAX;
# IR: OP ADD var_162__argI imm_229 tmp_230
mov EAX, EBP[-11];
mov EBX, 4;
add EAX, EBX;
mov EBP[-155], EAX;
# IR: MOV var_162__argI tmp_230
mov EAX, EBP[-155];
mov EBP[-11], EAX;
# IR: CALL func_12__print_num [ var_166__arg ] tmp_231
push EBP[-27];
call func_12__print_num;
add ESP, 4;
mov EBP[-159], eax;
:lbl_to_227:
# End code block cb_225
jmp lbl_266__if_end;
:lbl_265__if_else:
:lbl_266__if_end:
# IR: IF cb_232 tmp_238 cb_239
# Begin code block cb_232
:lbl_from_233:
# IR: OP INDEX imm_235 imm_236 tmp_237
mov EAX, imm_235;
mov EBX, 0;
mul EAX, 1;
add EAX, EBX;
mov EBP[-171], EAX;
# IR: OP EQUAL var_177__c2 tmp_237 tmp_238
mov EAX, EBP[-39];
mov ECX, EBP[-171];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-175], EAX;
:lbl_to_234:
# End code block cb_232
mov EAX, 0;
cmp EBP[-175], EAX;
jz lbl_268__if_else;
# Begin code block cb_239
:lbl_from_240:
# IR: CALL func_16__newline [ ] tmp_242
call func_16__newline;
add ESP, 0;
mov EBP[-179], eax;
:lbl_to_241:
# End code block cb_239
jmp lbl_269__if_end;
:lbl_268__if_else:
:lbl_269__if_end:
:lbl_to_202:
# End code block cb_200
jmp lbl_260__if_end;
:lbl_259__if_else:
# IR: ELSE cb_243
# Begin code block cb_243
:lbl_from_244:
# IR: CALL func_14__printc [ var_164__c ] tmp_246
push EBP[-19];
call func_14__printc;
add ESP, 4;
mov EBP[-183], eax;
:lbl_to_245:
# End code block cb_243
:lbl_260__if_end:
:lbl_to_184:
# End code block cb_182
jmp lbl_257__if_end;
:lbl_256__if_else:
# IR: ELSE cb_247
# Begin code block cb_247
:lbl_from_248:
# IR: CALL func_14__printc [ var_164__c ] tmp_250
push EBP[-19];
call func_14__printc;
add ESP, 4;
mov EBP[-187], eax;
:lbl_to_249:
# End code block cb_247
:lbl_257__if_end:
# IR: OP INDEX var_159__fmt var_160__I tmp_251
mov EAX, EBP[13];
mov EBX, EBP[-3];
mul EAX, 1;
add EAX, EBX;
mov EBP[-191], EAX;
# IR: MOV var_164__c tmp_251
mov EAX, EBP[-191];
mov EAX, *EAX;
mov EBP[-19], EAX;
:lbl_to_175:
# End code block cb_173
jmp lbl_168__while_next;
:lbl_169__while_end:
# IR: LEAVE
sub ESP, -219;
ret;
:lbl_to_156:
# End code block cb_154
# Begin code block cb_252
:func_11__strlen:
# IR: ENTER scp_255__NULL
sub ESP, 23;
# IR: MOV var_257__I imm_258
mov EAX, 0;
mov EBP[-3], EAX;
# IR: WHILE cb_261 tmp_264 cb_265 lbl_259__while_next lbl_260__while_end
:lbl_259__while_next:
# Begin code block cb_261
:lbl_from_262:
# IR: OP INDEX var_256__str var_257__I tmp_264
mov EAX, EBP[9];
mov EBX, EBP[-3];
mul EAX, 1;
add EAX, EBX;
mov EBP[-11], EAX;
:lbl_to_263:
# End code block cb_261
mov EAX, EBP[-11];
mov EAX, *EAX;
cmp EAX, 0;
jz lbl_260__while_end;
# Begin code block cb_265
:lbl_from_266:
# IR: OP INC var_257__I none tmp_268
mov EAX, EBP[-3];
mov EBP[-15], EAX;
inc EBP[-3];
:lbl_to_267:
# End code block cb_265
jmp lbl_259__while_next;
:lbl_260__while_end:
# IR: RETURN var_257__I
mov EAX, EBP[-3];
sub ESP, -23;
ret;
# IR: LEAVE
sub ESP, -23;
ret;
:lbl_to_254:
# End code block cb_252
# Begin code block cb_87
:func_6__putch:
# IR: ENTER scp_90__NULL
sub ESP, 43;
# IR: CALL func_8__scr_push_byte [ var_94__c ] tmp_95
push EBP[21];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-3], eax;
# IR: CALL func_8__scr_push_byte [ var_93__r ] tmp_96
push EBP[17];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-7], eax;
# IR: CALL func_8__scr_push_byte [ var_92__g ] tmp_97
push EBP[13];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-11], eax;
# IR: CALL func_8__scr_push_byte [ var_91__b ] tmp_98
push EBP[9];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-15], eax;
# IR: CALL func_8__scr_push_byte [ imm_99 ] tmp_100
push 0;
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-23], eax;
# IR: CALL func_8__scr_push_byte [ imm_101 ] tmp_102
push 0;
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-31], eax;
# IR: CALL func_8__scr_push_byte [ imm_103 ] tmp_104
push 0;
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-39], eax;
# IR: LEAVE
sub ESP, -43;
ret;
:lbl_to_89:
# End code block cb_87
# Begin code block cb_341
:func_15__prints:
# IR: ENTER scp_344__NULL
sub ESP, 19;
# IR: CALL func_5__print [ imm_348 imm_347 imm_346 var_345__s ] tmp_349
push EBP[9];
push 255;
push 255;
push 255;
call func_5__print;
add ESP, 16;
mov EBP[-15], eax;
# IR: LEAVE
sub ESP, -19;
ret;
:lbl_to_343:
# End code block cb_341
# Begin code block cb_269
:func_12__print_num:
# IR: ENTER scp_272__NULL
sub ESP, 91;
# IR: MOV var_274__buff imm_275
mov EAX, imm_275;
mov EBP[-3], EAX;
# IR: MOV var_276__buffI imm_277
mov EAX, 0;
mov EBP[-11], EAX;
# IR: MOV var_278__nums imm_279
mov EAX, imm_279;
mov EBP[-19], EAX;
# IR: WHILE cb_282 tmp_286 cb_287 lbl_280__while_next lbl_281__while_end
:lbl_280__while_next:
# Begin code block cb_282
:lbl_from_283:
# IR: OP GREATER var_273__num imm_285 tmp_286
mov EAX, EBP[9];
mov EBX, 0;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_G; bnot EAX; bnot EAX;
mov EBP[-31], EAX;
:lbl_to_284:
# End code block cb_282
mov EAX, 0;
cmp EBP[-31], EAX;
jz lbl_281__while_end;
# Begin code block cb_287
:lbl_from_288:
# IR: OP MOD var_273__num imm_291 tmp_292
mov EAX, EBP[9];
mov EBX, 10;
mod EAX, EBX;
mov EBP[-43], EAX;
# IR: MOV var_290__digit tmp_292
mov EAX, EBP[-43];
mov EBP[-35], EAX;
# IR: OP DIV var_273__num imm_293 tmp_294
mov EAX, EBP[9];
mov EBX, 10;
div EAX, EBX;
mov EBP[-51], EAX;
# IR: MOV var_273__num tmp_294
mov EAX, EBP[-51];
mov EBP[9], EAX;
# IR: OP INDEX var_278__nums var_290__digit tmp_296
mov EAX, EBP[-19];
mov EBX, EBP[-35];
mul EAX, 1;
add EAX, EBX;
mov EBP[-59], EAX;
# IR: MOV var_295__ch tmp_296
mov EAX, EBP[-59];
mov EAX, *EAX;
mov EBP[-55], EAX;
# IR: OP INDEX var_274__buff var_276__buffI tmp_297
mov EAX, EBP[-3];
mov EBX, EBP[-11];
mul EAX, 1;
add EAX, EBX;
mov EBP[-63], EAX;
# IR: MOV tmp_297 var_295__ch
mov EAX, EBP[-55];
mov EBX, EBP[-63];
mov *EBX, EAX;
# IR: OP INC var_276__buffI none tmp_298
mov EAX, EBP[-11];
mov EBP[-67], EAX;
inc EBP[-11];
:lbl_to_289:
# End code block cb_287
jmp lbl_280__while_next;
:lbl_281__while_end:
# IR: OP INDEX var_274__buff var_276__buffI tmp_299
mov EAX, EBP[-3];
mov EBX, EBP[-11];
mul EAX, 1;
add EAX, EBX;
mov EBP[-71], EAX;
# IR: MOV tmp_299 imm_300
mov EAX, 0;
mov EBX, EBP[-71];
mov *EBX, EAX;
# IR: CALL func_13__strrev [ var_274__buff ] tmp_301
push EBP[-3];
call func_13__strrev;
add ESP, 4;
mov EBP[-79], eax;
# IR: CALL func_15__prints [ var_274__buff ] tmp_302
push EBP[-3];
call func_15__prints;
add ESP, 4;
mov EBP[-83], eax;
# IR: LEAVE
sub ESP, -91;
ret;
:lbl_to_271:
# End code block cb_269
# Begin code block cb_350
:func_16__newline:
# IR: ENTER scp_353__NULL
sub ESP, 39;
# IR: OP DIV var_20__scr_I imm_355 tmp_356
mov EAX, *var_20__scr_I;
mov EBX, 7;
div EAX, EBX;
mov EBP[-11], EAX;
# IR: OP DIV tmp_356 var_24__n_tiles_x tmp_357
mov EAX, EBP[-11];
mov EBX, *var_24__n_tiles_x;
div EAX, EBX;
mov EBP[-15], EAX;
# IR: MOV var_354__n_lines tmp_357
mov EAX, EBP[-15];
mov EBP[-3], EAX;
# IR: OP ADD var_354__n_lines imm_358 tmp_359
mov EAX, EBP[-3];
mov EBX, 1;
add EAX, EBX;
mov EBP[-23], EAX;
# IR: OP MUL tmp_359 var_24__n_tiles_x tmp_360
mov EAX, EBP[-23];
mov EBX, *var_24__n_tiles_x;
mul EAX, EBX;
mov EBP[-27], EAX;
# IR: OP MUL tmp_360 imm_361 tmp_362
mov EAX, EBP[-27];
mov EBX, 7;
mul EAX, EBX;
mov EBP[-35], EAX;
# IR: MOV var_20__scr_I tmp_362
mov EAX, EBP[-35];
mov *var_20__scr_I, EAX;
# IR: LEAVE
sub ESP, -39;
ret;
:lbl_to_352:
# End code block cb_350
# Begin code block cb_332
:func_14__printc:
# IR: ENTER scp_335__NULL
sub ESP, 19;
# IR: CALL func_6__putch [ imm_339 imm_338 imm_337 var_336__ch ] tmp_340
push EBP[9];
push 255;
push 255;
push 255;
call func_6__putch;
add ESP, 16;
mov EBP[-15], eax;
# IR: LEAVE
sub ESP, -19;
ret;
:lbl_to_334:
# End code block cb_332
# Begin code block cb_105
:func_8__scr_push_byte:
# IR: ENTER scp_108__NULL
sub ESP, 11;
# IR: OP INDEX var_18__adr_scr var_20__scr_I tmp_110
mov EAX, *var_18__adr_scr;
mov EBX, *var_20__scr_I;
mul EAX, 1;
add EAX, EBX;
mov EBP[-3], EAX;
# IR: MOV tmp_110 var_109__b
mov EAX, EBP[9];
mov EBX, EBP[-3];
mov *EBX, EAX;
# IR: OP INC var_20__scr_I none tmp_111
mov EAX, *var_20__scr_I;
mov EBP[-7], EAX;
inc *var_20__scr_I;
# IR: LEAVE
sub ESP, -11;
ret;
:lbl_to_107:
# End code block cb_105
# Begin code block cb_303
:func_13__strrev:
# IR: ENTER scp_306__NULL
sub ESP, 71;
# IR: MOV var_308__sw imm_309
mov EAX, 0;
mov EBP[-3], EAX;
# IR: CALL func_11__strlen [ var_307__buff ] tmp_311
push EBP[9];
call func_11__strlen;
add ESP, 4;
mov EBP[-15], eax;
# IR: MOV var_310__len tmp_311
mov EAX, EBP[-15];
mov EBP[-11], EAX;
# IR: MOV var_312__idx_1 imm_313
mov EAX, 0;
mov EBP[-19], EAX;
# IR: OP SUB var_310__len imm_315 tmp_316
mov EAX, EBP[-11];
mov EBX, 1;
sub EAX, EBX;
mov EBP[-35], EAX;
# IR: MOV var_314__idx_2 tmp_316
mov EAX, EBP[-35];
mov EBP[-27], EAX;
# IR: WHILE cb_319 tmp_322 cb_323 lbl_317__while_next lbl_318__while_end
:lbl_317__while_next:
# Begin code block cb_319
:lbl_from_320:
# IR: OP LESS var_312__idx_1 var_314__idx_2 tmp_322
mov EAX, EBP[-19];
mov EBX, EBP[-27];
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_L; bnot EAX; bnot EAX;
mov EBP[-39], EAX;
:lbl_to_321:
# End code block cb_319
mov EAX, 0;
cmp EBP[-39], EAX;
jz lbl_318__while_end;
# Begin code block cb_323
:lbl_from_324:
# IR: OP INDEX var_307__buff var_312__idx_1 tmp_326
mov EAX, EBP[9];
mov EBX, EBP[-19];
mul EAX, 1;
add EAX, EBX;
mov EBP[-43], EAX;
# IR: MOV var_308__sw tmp_326
mov EAX, EBP[-43];
mov EAX, *EAX;
mov EBP[-3], EAX;
# IR: OP INDEX var_307__buff var_312__idx_1 tmp_327
mov EAX, EBP[9];
mov EBX, EBP[-19];
mul EAX, 1;
add EAX, EBX;
mov EBP[-47], EAX;
# IR: OP INDEX var_307__buff var_314__idx_2 tmp_328
mov EAX, EBP[9];
mov EBX, EBP[-27];
mul EAX, 1;
add EAX, EBX;
mov EBP[-51], EAX;
# IR: MOV tmp_327 tmp_328
mov EAX, EBP[-51];
mov EAX, *EAX;
mov EBX, EAX;
mov ECX, EBP[-47];
mov *ECX, EBX;
# IR: OP INDEX var_307__buff var_314__idx_2 tmp_329
mov EAX, EBP[9];
mov EBX, EBP[-27];
mul EAX, 1;
add EAX, EBX;
mov EBP[-55], EAX;
# IR: MOV tmp_329 var_308__sw
mov EAX, EBP[-3];
mov EBX, EBP[-55];
mov *EBX, EAX;
# IR: OP INC var_312__idx_1 none tmp_330
mov EAX, EBP[-19];
mov EBP[-59], EAX;
inc EBP[-19];
# IR: OP DEC var_314__idx_2 none tmp_331
mov EAX, EBP[-27];
mov EBP[-63], EAX;
dec EBP[-27];
:lbl_to_325:
# End code block cb_323
jmp lbl_317__while_next;
:lbl_318__while_end:
# IR: LEAVE
sub ESP, -71;
ret;
:lbl_to_305:
# End code block cb_303
:var_18__adr_scr: db 0;
:var_20__scr_I: db 0;
:var_22__alloc_p: db 0;
:var_24__n_tiles_x: db 0;
:var_26__n_tiles_y: db 0;
:tmp_28: db 0;
:imm_29: db "END PROGRAM", 0;
:tmp_33: db 0;
:tmp_34: db 0;
:imm_39: db "Hello World!", 0;
:imm_49: db "world", 0;
:imm_53: db "hello %s, num [%d]\n", 0;
:imm_57: db "\n", 0;
:imm_59: db "strlen( /n ) = %d\n", 0;
:imm_61: db "Okay.\n", 0;
:imm_186: db "%", 0;
:imm_191: db "\", 0;
:imm_207: db "s", 0;
:imm_221: db "d", 0;
:imm_235: db "n", 0;
:imm_275: db "aaaaaaaaaaa", 0;
:imm_279: db "0123456789", 0;
