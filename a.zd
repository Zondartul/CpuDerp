# Begin code block cb_1
# IR: MOV var_9__adr_scr imm_10
mov EAX, 67536;
mov *var_9__adr_scr, EAX;
# IR: MOV var_11__scr_I imm_12
mov EAX, 0;
mov *var_11__scr_I, EAX;
# IR: CALL func_4__main [ ] tmp_13
call func_4__main;
add ESP, 0;
mov *tmp_13, eax;
# IR: CALL func_7__infloop [ ] tmp_14
call func_7__infloop;
add ESP, 0;
mov *tmp_14, eax;
# End code block cb_1
# Begin code block cb_15
:func_4__main:
# IR: ENTER scp_18__NULL
sub ESP, 23;
# IR: CALL func_5__print [ imm_22 imm_21 imm_20 imm_19 ] tmp_23
push imm_19;
push 128;
push 255;
push 0;
call func_5__print;
add ESP, 16;
mov EBP[-19], eax;
# IR: LEAVE
sub ESP, -23;
ret;
# End code block cb_15
# Begin code block cb_74
:func_7__infloop:
# IR: ENTER scp_77__NULL
sub ESP, 11;
# IR: WHILE cb_80 imm_83 cb_84 lbl_78__while_next lbl_79__while_end
:lbl_78__while_next:
# Begin code block cb_80
# End code block cb_80

mov EAX, 0;
cmp 1, EAX;
jz lbl_79__while_end;
# Begin code block cb_84
# End code block cb_84

jmp lbl_78__while_next;
:lbl_79__while_end:
# IR: LEAVE
sub ESP, -11;
ret;
# End code block cb_74
# Begin code block cb_24
:func_5__print:
# IR: ENTER scp_27__NULL
sub ESP, 43;
# IR: MOV var_32__i imm_33
mov EAX, 0;
mov EBP[-3], EAX;
# IR: OP INDEX var_31__str var_32__i tmp_35
mov EAX, EBP[21];
mov EBX, EBP[-3];
add EAX, EBX;
mov EBP[-15], EAX;
# IR: MOV var_34__c tmp_35
mov EAX, EBP[-15];
mov EAX, *EAX;
mov EBP[-11], EAX;
# IR: WHILE cb_38 var_34__c cb_41 lbl_36__while_next lbl_37__while_end
:lbl_36__while_next:
# Begin code block cb_38
# End code block cb_38

mov EAX, 0;
cmp EBP[-11], EAX;
jz lbl_37__while_end;
# Begin code block cb_41
# IR: OP MUL var_32__i imm_44 tmp_45
mov EAX, EBP[-3];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-23], EAX;
# IR: OP INDEX var_31__str tmp_45 tmp_46
mov EAX, EBP[21];
mov EBX, EBP[-23];
add EAX, EBX;
mov EBP[-27], EAX;
# IR: MOV var_34__c tmp_46
mov EAX, EBP[-27];
mov EAX, *EAX;
mov EBP[-11], EAX;
# IR: OP INC var_32__i none tmp_47
mov EAX, EBP[-3];
mov EBP[-31], EAX;
inc EBP[-3];
# IR: CALL func_6__putch [ var_28__b var_29__g var_30__r var_34__c ] tmp_48
push EBP[-11];
push EBP[17];
push EBP[13];
push EBP[9];
call func_6__putch;
add ESP, 16;
mov EBP[-35], eax;
# End code block cb_41

jmp lbl_36__while_next;
:lbl_37__while_end:
# IR: LEAVE
sub ESP, -43;
ret;
# End code block cb_24
# Begin code block cb_49
:func_6__putch:
# IR: ENTER scp_52__NULL
sub ESP, 43;
# IR: CALL func_8__scr_push_byte [ var_56__c ] tmp_57
push EBP[21];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-3], eax;
# IR: CALL func_8__scr_push_byte [ var_55__r ] tmp_58
push EBP[17];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-7], eax;
# IR: CALL func_8__scr_push_byte [ var_54__g ] tmp_59
push EBP[13];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-11], eax;
# IR: CALL func_8__scr_push_byte [ var_53__b ] tmp_60
push EBP[9];
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-15], eax;
# IR: CALL func_8__scr_push_byte [ imm_61 ] tmp_62
push 0;
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-23], eax;
# IR: CALL func_8__scr_push_byte [ imm_63 ] tmp_64
push 0;
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-31], eax;
# IR: CALL func_8__scr_push_byte [ imm_65 ] tmp_66
push 0;
call func_8__scr_push_byte;
add ESP, 4;
mov EBP[-39], eax;
# IR: LEAVE
sub ESP, -43;
ret;
# End code block cb_49
# Begin code block cb_67
:func_8__scr_push_byte:
# IR: ENTER scp_70__NULL
sub ESP, 11;
# IR: OP INDEX var_9__adr_scr var_11__scr_I tmp_72
mov EAX, *var_9__adr_scr;
mov EBX, *var_11__scr_I;
add EAX, EBX;
mov EBP[-3], EAX;
# IR: MOV tmp_72 var_71__b
mov EAX, EBP[9];
mov EBX, EBP[-3];
mov *EBX, EAX;
# IR: OP INC var_11__scr_I none tmp_73
mov EAX, *var_11__scr_I;
mov EBP[-7], EAX;
inc *var_11__scr_I;
# IR: LEAVE
sub ESP, -11;
ret;
# End code block cb_67
:var_9__adr_scr: db 0;
:var_11__scr_I: db 0;
:tmp_13: db 0;
:tmp_14: db 0;
:imm_19: db "Hello World!", 0;
