# Begin code block cb_528
# IR: MOV var_543__adr_scr imm_544
mov EAX, 67536;
mov *var_543__adr_scr, EAX;
# IR: MOV var_545__scr_I imm_546
mov EAX, 0;
mov *var_545__scr_I, EAX;
# IR: MOV var_547__alloc_p imm_548
mov EAX, 10000;
mov *var_547__alloc_p, EAX;
# IR: MOV var_549__n_tiles_x imm_550
mov EAX, 56;
mov *var_549__n_tiles_x, EAX;
# IR: MOV var_551__n_tiles_y imm_552
mov EAX, 36;
mov *var_551__n_tiles_y, EAX;
# IR: CALL func_529__main [ ] tmp_553
call func_529__main;
add ESP, 0;
mov *tmp_553, eax;
# IR: CALL func_530__print [ imm_557 imm_556 imm_555 imm_554 ] tmp_558
push imm_554;
push 255;
push 0;
push 0;
call func_530__print;
add ESP, 16;
mov *tmp_558, eax;
# IR: CALL func_532__infloop [ ] tmp_559
call func_532__infloop;
add ESP, 0;
mov *tmp_559, eax;
# End code block cb_528
# Begin code block cb_560
:func_529__main:
# IR: ENTER scp_561__NULL
sub ESP, 99;
# IR: CALL func_530__print [ imm_565 imm_564 imm_563 imm_562 ] tmp_566
push imm_562;
push 128;
push 255;
push 0;
call func_530__print;
add ESP, 16;
mov EBP[-19], eax;
# IR: CALL func_534__alloc [ imm_568 ] tmp_569
push 10;
call func_534__alloc;
add ESP, 4;
mov EBP[-31], eax;
# IR: MOV var_567__args tmp_569
mov EAX, EBP[-31];
mov EBP[-23], EAX;
# IR: OP INDEX var_567__args imm_570 tmp_571
mov EAX, EBP[-23];
mov EBX, 0;
add EAX, EBX;
mov EBP[-39], EAX;
# IR: MOV tmp_571 imm_572
mov EAX, imm_572;
mov EBX, EBP[-39];
mov *EBX, EAX;
# IR: OP INDEX var_567__args imm_573 tmp_574
mov EAX, EBP[-23];
mov EBX, 4;
add EAX, EBX;
mov EBP[-51], EAX;
# IR: MOV tmp_574 imm_575
mov EAX, 123;
mov EBX, EBP[-51];
mov *EBX, EAX;
# IR: CALL func_542__printf [ var_567__args imm_576 ] tmp_577
push imm_576;
push EBP[-23];
call func_542__printf;
add ESP, 8;
mov EBP[-63], eax;
# IR: OP INDEX var_567__args imm_578 tmp_579
mov EAX, EBP[-23];
mov EBX, 0;
add EAX, EBX;
mov EBP[-71], EAX;
# IR: CALL func_536__strlen [ imm_580 ] tmp_581
push imm_580;
call func_536__strlen;
add ESP, 4;
mov EBP[-79], eax;
# IR: MOV tmp_579 tmp_581
mov EAX, EBP[-79];
mov EBX, EBP[-71];
mov *EBX, EAX;
# IR: CALL func_542__printf [ var_567__args imm_582 ] tmp_583
push imm_582;
push EBP[-23];
call func_542__printf;
add ESP, 8;
mov EBP[-87], eax;
# IR: CALL func_542__printf [ var_567__args imm_584 ] tmp_585
push imm_584;
push EBP[-23];
call func_542__printf;
add ESP, 8;
mov EBP[-95], eax;
# IR: LEAVE
sub ESP, -99;
ret;
# End code block cb_560
# Begin code block cb_586
:func_530__print:
# IR: ENTER scp_587__NULL
sub ESP, 47;
# IR: MOV var_592__i imm_593
mov EAX, 0;
mov EBP[-3], EAX;
# IR: OP INDEX var_591__str imm_595 tmp_596
mov EAX, EBP[21];
mov EBX, 0;
add EAX, EBX;
mov EBP[-19], EAX;
# IR: MOV var_594__c tmp_596
mov EAX, EBP[-19];
mov EAX, *EAX;
mov EBP[-11], EAX;
# IR: WHILE cb_599 var_594__c cb_600 lbl_597__while_next lbl_598__while_end
:lbl_597__while_next:
# Begin code block cb_599
# End code block cb_599

mov EAX, 0;
cmp EBP[-11], EAX;
jz lbl_598__while_end;
# Begin code block cb_600
# IR: CALL func_531__putch [ var_588__b var_589__g var_590__r var_594__c ] tmp_601
push EBP[-11];
push EBP[17];
push EBP[13];
push EBP[9];
call func_531__putch;
add ESP, 16;
mov EBP[-23], eax;
# IR: OP INC var_592__i none tmp_602
mov EAX, EBP[-3];
mov EBP[-27], EAX;
inc EBP[-3];
# IR: OP MUL var_592__i imm_603 tmp_604
mov EAX, EBP[-3];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-35], EAX;
# IR: OP INDEX var_591__str tmp_604 tmp_605
mov EAX, EBP[21];
mov EBX, EBP[-35];
add EAX, EBX;
mov EBP[-39], EAX;
# IR: MOV var_594__c tmp_605
mov EAX, EBP[-39];
mov EAX, *EAX;
mov EBP[-11], EAX;
# End code block cb_600

jmp lbl_597__while_next;
:lbl_598__while_end:
# IR: LEAVE
sub ESP, -47;
ret;
# End code block cb_586
# Begin code block cb_627
:func_532__infloop:
# IR: ENTER scp_628__NULL
sub ESP, 11;
# IR: WHILE cb_631 imm_632 cb_633 lbl_629__while_next lbl_630__while_end
:lbl_629__while_next:
# Begin code block cb_631
# End code block cb_631

mov EAX, 0;
cmp 1, EAX;
jz lbl_630__while_end;
# Begin code block cb_633
# End code block cb_633

jmp lbl_629__while_next;
:lbl_630__while_end:
# IR: LEAVE
sub ESP, -11;
ret;
# End code block cb_627
# Begin code block cb_634
:func_534__alloc:
# IR: ENTER scp_635__NULL
sub ESP, 11;
# IR: MOV var_637__res var_547__alloc_p
mov EAX, *var_547__alloc_p;
mov EBP[-3], EAX;
# IR: OP ADD var_547__alloc_p var_636__size tmp_638
mov EAX, *var_547__alloc_p;
mov EBX, EBP[9];
add EAX, EBX;
mov EBP[-7], EAX;
# IR: MOV var_547__alloc_p tmp_638
mov EAX, EBP[-7];
mov *var_547__alloc_p, EAX;
# IR: RETURN var_637__res
mov EAX, EBP[-3];
sub ESP, -11;
ret;
# IR: LEAVE
sub ESP, -11;
ret;
# End code block cb_634
# Begin code block cb_663
:func_542__printf:
# IR: ENTER scp_664__NULL
sub ESP, 243;
# IR: MOV var_667__I imm_668
mov EAX, 0;
mov EBP[-3], EAX;
# IR: MOV var_669__argI imm_670
mov EAX, 0;
mov EBP[-11], EAX;
# IR: OP MUL var_667__I imm_672 tmp_673
mov EAX, EBP[-3];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-27], EAX;
# IR: OP INDEX var_666__fmt tmp_673 tmp_674
mov EAX, EBP[13];
mov EBX, EBP[-27];
add EAX, EBX;
mov EBP[-31], EAX;
# IR: MOV var_671__c tmp_674
mov EAX, EBP[-31];
mov EAX, *EAX;
mov EBP[-19], EAX;
# IR: MOV var_675__arg imm_676
mov EAX, 0;
mov EBP[-35], EAX;
# IR: WHILE cb_679 var_671__c cb_680 lbl_677__while_next lbl_678__while_end
:lbl_677__while_next:
# Begin code block cb_679
# End code block cb_679

mov EAX, 0;
cmp EBP[-19], EAX;
jz lbl_678__while_end;
# Begin code block cb_680
# IR: OP INC var_667__I none tmp_681
mov EAX, EBP[-3];
mov EBP[-43], EAX;
inc EBP[-3];
# IR: OP MUL var_667__I imm_683 tmp_684
mov EAX, EBP[-3];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-55], EAX;
# IR: OP INDEX var_666__fmt tmp_684 tmp_685
mov EAX, EBP[13];
mov EBX, EBP[-55];
add EAX, EBX;
mov EBP[-59], EAX;
# IR: MOV var_682__c2 tmp_685
mov EAX, EBP[-59];
mov EAX, *EAX;
mov EBP[-47], EAX;
# IR: IF cb_686 var_682__c2 cb_687
# Begin code block cb_686
# End code block cb_686

mov EAX, 0;
cmp EBP[-47], EAX;
jz lbl_794__if_else;
# Begin code block cb_687
# IR: OP INDEX imm_689 imm_690 tmp_691
mov EAX, imm_689;
mov EBX, 0;
add EAX, EBX;
mov EBP[-75], EAX;
# IR: OP EQUAL var_671__c tmp_691 tmp_692
mov EAX, EBP[-19];
mov ECX, EBP[-75];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-79], EAX;
# IR: MOV var_688__is_perc tmp_692
mov EAX, EBP[-79];
mov EBP[-63], EAX;
# IR: OP INDEX imm_694 imm_695 tmp_696
mov EAX, imm_694;
mov EBX, 0;
add EAX, EBX;
mov EBP[-95], EAX;
# IR: OP EQUAL var_671__c tmp_696 tmp_697
mov EAX, EBP[-19];
mov ECX, EBP[-95];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-99], EAX;
# IR: MOV var_693__is_bsl tmp_697
mov EAX, EBP[-99];
mov EBP[-83], EAX;
# IR: OP ADD var_688__is_perc var_693__is_bsl tmp_699
mov EAX, EBP[-63];
mov EBX, EBP[-83];
add EAX, EBX;
mov EBP[-107], EAX;
# IR: MOV var_698__is_spec tmp_699
mov EAX, EBP[-107];
mov EBP[-103], EAX;
# IR: IF cb_700 var_698__is_spec cb_701
# Begin code block cb_700
# End code block cb_700

mov EAX, 0;
cmp EBP[-103], EAX;
jz lbl_797__if_else;
# Begin code block cb_701
# IR: OP INC var_667__I none tmp_702
mov EAX, EBP[-3];
mov EBP[-111], EAX;
inc EBP[-3];
# IR: IF cb_703 tmp_707 cb_708
# Begin code block cb_703
# IR: OP INDEX imm_704 imm_705 tmp_706
mov EAX, imm_704;
mov EBX, 0;
add EAX, EBX;
mov EBP[-123], EAX;
# IR: OP EQUAL var_682__c2 tmp_706 tmp_707
mov EAX, EBP[-47];
mov ECX, EBP[-123];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-127], EAX;
# End code block cb_703

mov EAX, 0;
cmp EBP[-127], EAX;
jz lbl_800__if_else;
# Begin code block cb_708
# IR: OP INDEX var_665__args var_669__argI tmp_709
mov EAX, EBP[9];
mov EBX, EBP[-11];
add EAX, EBX;
mov EBP[-131], EAX;
# IR: MOV var_675__arg tmp_709
mov EAX, EBP[-131];
mov EAX, *EAX;
mov EBP[-35], EAX;
# IR: OP ADD var_669__argI imm_710 tmp_711
mov EAX, EBP[-11];
mov EBX, 4;
add EAX, EBX;
mov EBP[-139], EAX;
# IR: MOV var_669__argI tmp_711
mov EAX, EBP[-139];
mov EBP[-11], EAX;
# IR: CALL func_540__prints [ var_675__arg ] tmp_712
push EBP[-35];
call func_540__prints;
add ESP, 4;
mov EBP[-143], eax;
# End code block cb_708

jmp lbl_801__if_end;
:lbl_800__if_else:
:lbl_801__if_end:
# IR: IF cb_713 tmp_717 cb_718
# Begin code block cb_713
# IR: OP INDEX imm_714 imm_715 tmp_716
mov EAX, imm_714;
mov EBX, 0;
add EAX, EBX;
mov EBP[-155], EAX;
# IR: OP EQUAL var_682__c2 tmp_716 tmp_717
mov EAX, EBP[-47];
mov ECX, EBP[-155];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-159], EAX;
# End code block cb_713

mov EAX, 0;
cmp EBP[-159], EAX;
jz lbl_803__if_else;
# Begin code block cb_718
# IR: OP INDEX var_665__args var_669__argI tmp_719
mov EAX, EBP[9];
mov EBX, EBP[-11];
add EAX, EBX;
mov EBP[-163], EAX;
# IR: MOV var_675__arg tmp_719
mov EAX, EBP[-163];
mov EAX, *EAX;
mov EBP[-35], EAX;
# IR: OP ADD var_669__argI imm_720 tmp_721
mov EAX, EBP[-11];
mov EBX, 4;
add EAX, EBX;
mov EBP[-171], EAX;
# IR: MOV var_669__argI tmp_721
mov EAX, EBP[-171];
mov EBP[-11], EAX;
# IR: CALL func_537__print_num [ var_675__arg ] tmp_722
push EBP[-35];
call func_537__print_num;
add ESP, 4;
mov EBP[-175], eax;
# End code block cb_718

jmp lbl_804__if_end;
:lbl_803__if_else:
:lbl_804__if_end:
# IR: IF cb_723 tmp_727 cb_728
# Begin code block cb_723
# IR: OP INDEX imm_724 imm_725 tmp_726
mov EAX, imm_724;
mov EBX, 0;
add EAX, EBX;
mov EBP[-187], EAX;
# IR: OP EQUAL var_682__c2 tmp_726 tmp_727
mov EAX, EBP[-47];
mov ECX, EBP[-187];
mov ECX, *ECX;
mov EBX, ECX;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_Z; bnot EAX; bnot EAX;
mov EBP[-191], EAX;
# End code block cb_723

mov EAX, 0;
cmp EBP[-191], EAX;
jz lbl_806__if_else;
# Begin code block cb_728
# IR: CALL func_541__newline [ ] tmp_729
call func_541__newline;
add ESP, 0;
mov EBP[-195], eax;
# End code block cb_728

jmp lbl_807__if_end;
:lbl_806__if_else:
:lbl_807__if_end:
# End code block cb_701

jmp lbl_798__if_end;
:lbl_797__if_else:
# IR: ELSE cb_730
# Begin code block cb_730
# IR: CALL func_539__printc [ var_671__c ] tmp_731
push EBP[-19];
call func_539__printc;
add ESP, 4;
mov EBP[-199], eax;
# End code block cb_730

:lbl_798__if_end:
# End code block cb_687

jmp lbl_795__if_end;
:lbl_794__if_else:
# IR: ELSE cb_732
# Begin code block cb_732
# IR: CALL func_539__printc [ var_671__c ] tmp_733
push EBP[-19];
call func_539__printc;
add ESP, 4;
mov EBP[-203], eax;
# End code block cb_732

:lbl_795__if_end:
# IR: OP MUL var_667__I imm_734 tmp_735
mov EAX, EBP[-3];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-211], EAX;
# IR: OP INDEX var_666__fmt tmp_735 tmp_736
mov EAX, EBP[13];
mov EBX, EBP[-211];
add EAX, EBX;
mov EBP[-215], EAX;
# IR: MOV var_671__c tmp_736
mov EAX, EBP[-215];
mov EAX, *EAX;
mov EBP[-19], EAX;
# End code block cb_680

jmp lbl_677__while_next;
:lbl_678__while_end:
# IR: LEAVE
sub ESP, -243;
ret;
# End code block cb_663
# Begin code block cb_737
:func_536__strlen:
# IR: ENTER scp_738__NULL
sub ESP, 31;
# IR: MOV var_740__I imm_741
mov EAX, 0;
mov EBP[-3], EAX;
# IR: WHILE cb_744 tmp_747 cb_748 lbl_742__while_next lbl_743__while_end
:lbl_742__while_next:
# Begin code block cb_744
# IR: OP MUL imm_745 var_740__I tmp_746
mov EAX, 4;
mov EBX, EBP[-3];
mul EAX, EBX;
mov EBP[-15], EAX;
# IR: OP INDEX var_739__str tmp_746 tmp_747
mov EAX, EBP[9];
mov EBX, EBP[-15];
add EAX, EBX;
mov EBP[-19], EAX;
# End code block cb_744

mov EAX, EBP[-19];
mov EAX, *EAX;
cmp EAX, 0;
jz lbl_743__while_end;
# Begin code block cb_748
# IR: OP INC var_740__I none tmp_749
mov EAX, EBP[-3];
mov EBP[-23], EAX;
inc EBP[-3];
# End code block cb_748

jmp lbl_742__while_next;
:lbl_743__while_end:
# IR: RETURN var_740__I
mov EAX, EBP[-3];
sub ESP, -31;
ret;
# IR: LEAVE
sub ESP, -31;
ret;
# End code block cb_737
# Begin code block cb_606
:func_531__putch:
# IR: ENTER scp_607__NULL
sub ESP, 43;
# IR: CALL func_533__scr_push_byte [ var_611__c ] tmp_612
push EBP[21];
call func_533__scr_push_byte;
add ESP, 4;
mov EBP[-3], eax;
# IR: CALL func_533__scr_push_byte [ var_610__r ] tmp_613
push EBP[17];
call func_533__scr_push_byte;
add ESP, 4;
mov EBP[-7], eax;
# IR: CALL func_533__scr_push_byte [ var_609__g ] tmp_614
push EBP[13];
call func_533__scr_push_byte;
add ESP, 4;
mov EBP[-11], eax;
# IR: CALL func_533__scr_push_byte [ var_608__b ] tmp_615
push EBP[9];
call func_533__scr_push_byte;
add ESP, 4;
mov EBP[-15], eax;
# IR: CALL func_533__scr_push_byte [ imm_616 ] tmp_617
push 0;
call func_533__scr_push_byte;
add ESP, 4;
mov EBP[-23], eax;
# IR: CALL func_533__scr_push_byte [ imm_618 ] tmp_619
push 0;
call func_533__scr_push_byte;
add ESP, 4;
mov EBP[-31], eax;
# IR: CALL func_533__scr_push_byte [ imm_620 ] tmp_621
push 0;
call func_533__scr_push_byte;
add ESP, 4;
mov EBP[-39], eax;
# IR: LEAVE
sub ESP, -43;
ret;
# End code block cb_606
# Begin code block cb_822
:func_540__prints:
# IR: ENTER scp_823__NULL
sub ESP, 19;
# IR: CALL func_530__print [ imm_827 imm_826 imm_825 var_824__s ] tmp_828
push EBP[9];
push 255;
push 255;
push 255;
call func_530__print;
add ESP, 16;
mov EBP[-15], eax;
# IR: LEAVE
sub ESP, -19;
ret;
# End code block cb_822
# Begin code block cb_750
:func_537__print_num:
# IR: ENTER scp_751__NULL
sub ESP, 115;
# IR: MOV var_753__buff imm_754
mov EAX, imm_754;
mov EBP[-3], EAX;
# IR: MOV var_755__buffI imm_756
mov EAX, 0;
mov EBP[-11], EAX;
# IR: MOV var_757__nums imm_758
mov EAX, imm_758;
mov EBP[-19], EAX;
# IR: WHILE cb_761 tmp_763 cb_764 lbl_759__while_next lbl_760__while_end
:lbl_759__while_next:
# Begin code block cb_761
# IR: OP GREATER var_752__num imm_762 tmp_763
mov EAX, EBP[9];
mov EBX, 0;
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_G; bnot EAX; bnot EAX;
mov EBP[-31], EAX;
# End code block cb_761

mov EAX, 0;
cmp EBP[-31], EAX;
jz lbl_760__while_end;
# Begin code block cb_764
# IR: OP MOD var_752__num imm_766 tmp_767
mov EAX, EBP[9];
mov EBX, 10;
mod EAX, EBX;
mov EBP[-43], EAX;
# IR: MOV var_765__digit tmp_767
mov EAX, EBP[-43];
mov EBP[-35], EAX;
# IR: OP DIV var_752__num imm_768 tmp_769
mov EAX, EBP[9];
mov EBX, 10;
div EAX, EBX;
mov EBP[-51], EAX;
# IR: MOV var_752__num tmp_769
mov EAX, EBP[-51];
mov EBP[9], EAX;
# IR: OP MUL var_765__digit imm_771 tmp_772
mov EAX, EBP[-35];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-63], EAX;
# IR: OP INDEX var_757__nums tmp_772 tmp_773
mov EAX, EBP[-19];
mov EBX, EBP[-63];
add EAX, EBX;
mov EBP[-67], EAX;
# IR: MOV var_770__ch tmp_773
mov EAX, EBP[-67];
mov EAX, *EAX;
mov EBP[-55], EAX;
# IR: OP MUL var_755__buffI imm_774 tmp_775
mov EAX, EBP[-11];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-75], EAX;
# IR: OP INDEX var_753__buff tmp_775 tmp_776
mov EAX, EBP[-3];
mov EBX, EBP[-75];
add EAX, EBX;
mov EBP[-79], EAX;
# IR: MOV tmp_776 var_770__ch
mov EAX, EBP[-55];
mov EBX, EBP[-79];
mov *EBX, EAX;
# IR: OP INC var_755__buffI none tmp_777
mov EAX, EBP[-11];
mov EBP[-83], EAX;
inc EBP[-11];
# End code block cb_764

jmp lbl_759__while_next;
:lbl_760__while_end:
# IR: OP MUL var_755__buffI imm_778 tmp_779
mov EAX, EBP[-11];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-91], EAX;
# IR: OP INDEX var_753__buff tmp_779 tmp_780
mov EAX, EBP[-3];
mov EBX, EBP[-91];
add EAX, EBX;
mov EBP[-95], EAX;
# IR: MOV tmp_780 imm_781
mov EAX, 0;
mov EBX, EBP[-95];
mov *EBX, EAX;
# IR: CALL func_538__strrev [ var_753__buff ] tmp_782
push EBP[-3];
call func_538__strrev;
add ESP, 4;
mov EBP[-103], eax;
# IR: CALL func_540__prints [ var_753__buff ] tmp_783
push EBP[-3];
call func_540__prints;
add ESP, 4;
mov EBP[-107], eax;
# IR: LEAVE
sub ESP, -115;
ret;
# End code block cb_750
# Begin code block cb_829
:func_541__newline:
# IR: ENTER scp_830__NULL
sub ESP, 39;
# IR: OP DIV var_545__scr_I imm_832 tmp_833
mov EAX, *var_545__scr_I;
mov EBX, 7;
div EAX, EBX;
mov EBP[-11], EAX;
# IR: OP DIV tmp_833 var_549__n_tiles_x tmp_834
mov EAX, EBP[-11];
mov EBX, *var_549__n_tiles_x;
div EAX, EBX;
mov EBP[-15], EAX;
# IR: MOV var_831__n_lines tmp_834
mov EAX, EBP[-15];
mov EBP[-3], EAX;
# IR: OP ADD var_831__n_lines imm_835 tmp_836
mov EAX, EBP[-3];
mov EBX, 1;
add EAX, EBX;
mov EBP[-23], EAX;
# IR: OP MUL tmp_836 var_549__n_tiles_x tmp_837
mov EAX, EBP[-23];
mov EBX, *var_549__n_tiles_x;
mul EAX, EBX;
mov EBP[-27], EAX;
# IR: OP MUL tmp_837 imm_838 tmp_839
mov EAX, EBP[-27];
mov EBX, 7;
mul EAX, EBX;
mov EBP[-35], EAX;
# IR: MOV var_545__scr_I tmp_839
mov EAX, EBP[-35];
mov *var_545__scr_I, EAX;
# IR: LEAVE
sub ESP, -39;
ret;
# End code block cb_829
# Begin code block cb_815
:func_539__printc:
# IR: ENTER scp_816__NULL
sub ESP, 19;
# IR: CALL func_531__putch [ imm_820 imm_819 imm_818 var_817__ch ] tmp_821
push EBP[9];
push 255;
push 255;
push 255;
call func_531__putch;
add ESP, 16;
mov EBP[-15], eax;
# IR: LEAVE
sub ESP, -19;
ret;
# End code block cb_815
# Begin code block cb_622
:func_533__scr_push_byte:
# IR: ENTER scp_623__NULL
sub ESP, 11;
# IR: OP INDEX var_543__adr_scr var_545__scr_I tmp_625
mov EAX, *var_543__adr_scr;
mov EBX, *var_545__scr_I;
add EAX, EBX;
mov EBP[-3], EAX;
# IR: MOV tmp_625 var_624__b
mov EAX, EBP[9];
mov EBX, EBP[-3];
mov *EBX, EAX;
# IR: OP INC var_545__scr_I none tmp_626
mov EAX, *var_545__scr_I;
mov EBP[-7], EAX;
inc *var_545__scr_I;
# IR: LEAVE
sub ESP, -11;
ret;
# End code block cb_622
# Begin code block cb_784
:func_538__strrev:
# IR: ENTER scp_785__NULL
sub ESP, 103;
# IR: MOV var_787__sw imm_788
mov EAX, 0;
mov EBP[-3], EAX;
# IR: CALL func_536__strlen [ var_786__buff ] tmp_790
push EBP[9];
call func_536__strlen;
add ESP, 4;
mov EBP[-15], eax;
# IR: MOV var_789__len tmp_790
mov EAX, EBP[-15];
mov EBP[-11], EAX;
# IR: MOV var_791__idx_1 imm_792
mov EAX, 0;
mov EBP[-19], EAX;
# IR: OP SUB var_789__len imm_794 tmp_795
mov EAX, EBP[-11];
mov EBX, 1;
sub EAX, EBX;
mov EBP[-35], EAX;
# IR: MOV var_793__idx_2 tmp_795
mov EAX, EBP[-35];
mov EBP[-27], EAX;
# IR: WHILE cb_798 tmp_799 cb_800 lbl_796__while_next lbl_797__while_end
:lbl_796__while_next:
# Begin code block cb_798
# IR: OP LESS var_791__idx_1 var_793__idx_2 tmp_799
mov EAX, EBP[-19];
mov EBX, EBP[-27];
cmp EAX, EBX; mov EAX, CTRL; band EAX, CMP_L; bnot EAX; bnot EAX;
mov EBP[-39], EAX;
# End code block cb_798

mov EAX, 0;
cmp EBP[-39], EAX;
jz lbl_797__while_end;
# Begin code block cb_800
# IR: OP MUL var_791__idx_1 imm_801 tmp_802
mov EAX, EBP[-19];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-47], EAX;
# IR: OP INDEX var_786__buff tmp_802 tmp_803
mov EAX, EBP[9];
mov EBX, EBP[-47];
add EAX, EBX;
mov EBP[-51], EAX;
# IR: MOV var_787__sw tmp_803
mov EAX, EBP[-51];
mov EAX, *EAX;
mov EBP[-3], EAX;
# IR: OP MUL var_791__idx_1 imm_804 tmp_805
mov EAX, EBP[-19];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-59], EAX;
# IR: OP INDEX var_786__buff tmp_805 tmp_806
mov EAX, EBP[9];
mov EBX, EBP[-59];
add EAX, EBX;
mov EBP[-63], EAX;
# IR: OP MUL var_793__idx_2 imm_807 tmp_808
mov EAX, EBP[-27];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-71], EAX;
# IR: OP INDEX var_786__buff tmp_808 tmp_809
mov EAX, EBP[9];
mov EBX, EBP[-71];
add EAX, EBX;
mov EBP[-75], EAX;
# IR: MOV tmp_806 tmp_809
mov EAX, EBP[-75];
mov EAX, *EAX;
mov EBX, EAX;
mov ECX, EBP[-63];
mov *ECX, EBX;
# IR: OP MUL var_793__idx_2 imm_810 tmp_811
mov EAX, EBP[-27];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-83], EAX;
# IR: OP INDEX var_786__buff tmp_811 tmp_812
mov EAX, EBP[9];
mov EBX, EBP[-83];
add EAX, EBX;
mov EBP[-87], EAX;
# IR: MOV tmp_812 var_787__sw
mov EAX, EBP[-3];
mov EBX, EBP[-87];
mov *EBX, EAX;
# IR: OP INC var_791__idx_1 none tmp_813
mov EAX, EBP[-19];
mov EBP[-91], EAX;
inc EBP[-19];
# IR: OP DEC var_793__idx_2 none tmp_814
mov EAX, EBP[-27];
mov EBP[-95], EAX;
dec EBP[-27];
# End code block cb_800

jmp lbl_796__while_next;
:lbl_797__while_end:
# IR: LEAVE
sub ESP, -103;
ret;
# End code block cb_784
:var_22__adr_scr: db 0;
:var_24__scr_I: db 0;
:var_26__alloc_p: db 0;
:var_28__n_tiles_x: db 0;
:var_30__n_tiles_y: db 0;
:tmp_32: db 0;
:imm_33: db "END PROGRAM", 0;
:tmp_37: db 0;
:tmp_38: db 0;
:imm_41: db "Hello World!", 0;
:imm_51: db "world", 0;
:imm_55: db "hello %s, num [%d]\n", 0;
:imm_59: db "\n", 0;
:imm_61: db " strlen( /n ) = %d", 0;
:imm_63: db "Okay.", 0;
:imm_168: db "%", 0;
:imm_173: db "\", 0;
:imm_183: db "s", 0;
:imm_193: db "d", 0;
:imm_203: db "n", 0;
:imm_240: db "%", 0;
:imm_247: db "%", 0;
:imm_257: db "s", 0;
:imm_295: db "aaaaaaaaaaa", 0;
:imm_299: db "0123456789", 0;
:imm_329: db "aaaaaaaaaaa", 0;
:imm_333: db "0123456789", 0;
:imm_394: db "0", 0;
:imm_400: db "1", 0;
:imm_406: db "2", 0;
:imm_412: db "3", 0;
:imm_418: db "4", 0;
:imm_424: db "5", 0;
:imm_430: db "6", 0;
:imm_436: db "7", 0;
:imm_442: db "8", 0;
:imm_448: db "9", 0;
:imm_454: db "a", 0;
:imm_508: db "[", 0;
:imm_511: db "] : [", 0;
:imm_514: db "]", 0;
:imm_522: db ": ", 0;
:imm_525: db " ", 0;
:var_543__adr_scr: db 0;
:var_545__scr_I: db 0;
:var_547__alloc_p: db 0;
:var_549__n_tiles_x: db 0;
:var_551__n_tiles_y: db 0;
:tmp_553: db 0;
:imm_554: db "END PROGRAM", 0;
:tmp_558: db 0;
:tmp_559: db 0;
:imm_562: db "Hello World!", 0;
:imm_572: db "world", 0;
:imm_576: db "hello %s, num [%d]\n", 0;
:imm_580: db "\n", 0;
:imm_582: db "strlen( /n ) = %d\n", 0;
:imm_584: db "Okay.\n", 0;
:imm_689: db "%", 0;
:imm_694: db "\", 0;
:imm_704: db "s", 0;
:imm_714: db "d", 0;
:imm_724: db "n", 0;
:imm_754: db "aaaaaaaaaaa", 0;
:imm_758: db "0123456789", 0;
