# Begin code block cb_1
# IR: MOV var_7__adr_scr imm_8
mov EAX, 67536;
mov *var_7__adr_scr, EAX;
# IR: MOV var_9__scr_I imm_10
mov EAX, 0;
mov *var_9__scr_I, EAX;
# IR: CALL func_2__main [ ] tmp_11
call func_2__main;
add ESP, 0;
mov *tmp_11, eax;
# IR: CALL func_5__infloop [ ] tmp_12
call func_5__infloop;
add ESP, 0;
mov *tmp_12, eax;
# End code block cb_1
# Begin code block cb_13
:func_2__main:
# IR: ENTER scp_14__NULL
sub ESP, 23;
# IR: CALL func_3__print [ imm_18 imm_17 imm_16 imm_15 ] tmp_19
push 0;
push 255;
push 128;
push imm_18;
call func_3__print;
add ESP, 16;
mov EBP[-19], eax;
# IR: LEAVE
sub ESP, -23;
ret;
# End code block cb_13
# Begin code block cb_60
:func_5__infloop:
# IR: ENTER scp_61__NULL
sub ESP, 11;
# IR: WHILE cb_64 imm_65 cb_66 lbl_62__while_next lbl_63__while_end
:lbl_62__while_next:
# Begin code block cb_64
# End code block cb_64

mov EAX, 0;
cmp 1, EAX;
jz lbl_63__while_end;
# Begin code block cb_66
# End code block cb_66

jmp lbl_62__while_next;
:lbl_63__while_end:
# IR: LEAVE
sub ESP, -11;
ret;
# End code block cb_60
# Begin code block cb_20
:func_3__print:
# IR: ENTER scp_21__NULL
sub ESP, 43;
# IR: MOV var_26__i imm_27
mov EAX, 0;
mov EBP[-3], EAX;
# IR: OP INDEX var_22__str var_26__i tmp_29
mov EAX, EBP[9];
mov EBX, EBP[-3];
add EAX, EBX;
mov EBP[-15], EAX;
# IR: MOV var_28__c tmp_29
mov EAX, EBP[-15];
mov EAX, *EAX;
mov EBP[-11], EAX;
# IR: WHILE cb_32 var_28__c cb_33 lbl_30__while_next lbl_31__while_end
:lbl_30__while_next:
# Begin code block cb_32
# End code block cb_32

mov EAX, 0;
cmp EBP[-11], EAX;
jz lbl_31__while_end;
# Begin code block cb_33
# IR: OP MUL var_26__i imm_34 tmp_35
mov EAX, EBP[-3];
mov EBX, 4;
mul EAX, EBX;
mov EBP[-23], EAX;
# IR: OP INDEX var_22__str tmp_35 tmp_36
mov EAX, EBP[9];
mov EBX, EBP[-23];
add EAX, EBX;
mov EBP[-27], EAX;
# IR: MOV var_28__c tmp_36
mov EAX, EBP[-27];
mov EAX, *EAX;
mov EBP[-11], EAX;
# IR: OP INC var_26__i none tmp_37
mov EAX, EBP[-3];
mov EBP[-31], EAX;
inc EBP[-3];
# IR: CALL func_4__putch [ var_28__c var_23__r var_24__g var_25__b ] tmp_38
push EBP[21];
push EBP[17];
push EBP[13];
push EBP[-11];
call func_4__putch;
add ESP, 16;
mov EBP[-35], eax;
# End code block cb_33

jmp lbl_30__while_next;
:lbl_31__while_end:
# IR: LEAVE
sub ESP, -43;
ret;
# End code block cb_20
# Begin code block cb_39
:func_4__putch:
# IR: ENTER scp_40__NULL
sub ESP, 43;
# IR: CALL func_6__scr_push_byte [ var_41__c ] tmp_45
push EBP[9];
call func_6__scr_push_byte;
add ESP, 4;
mov EBP[-3], eax;
# IR: CALL func_6__scr_push_byte [ var_42__r ] tmp_46
push EBP[13];
call func_6__scr_push_byte;
add ESP, 4;
mov EBP[-7], eax;
# IR: CALL func_6__scr_push_byte [ var_43__g ] tmp_47
push EBP[17];
call func_6__scr_push_byte;
add ESP, 4;
mov EBP[-11], eax;
# IR: CALL func_6__scr_push_byte [ var_44__b ] tmp_48
push EBP[21];
call func_6__scr_push_byte;
add ESP, 4;
mov EBP[-15], eax;
# IR: CALL func_6__scr_push_byte [ imm_49 ] tmp_50
push 0;
call func_6__scr_push_byte;
add ESP, 4;
mov EBP[-23], eax;
# IR: CALL func_6__scr_push_byte [ imm_51 ] tmp_52
push 0;
call func_6__scr_push_byte;
add ESP, 4;
mov EBP[-31], eax;
# IR: CALL func_6__scr_push_byte [ imm_53 ] tmp_54
push 0;
call func_6__scr_push_byte;
add ESP, 4;
mov EBP[-39], eax;
# IR: LEAVE
sub ESP, -43;
ret;
# End code block cb_39
# Begin code block cb_55
:func_6__scr_push_byte:
# IR: ENTER scp_56__NULL
sub ESP, 11;
# IR: OP INDEX var_7__adr_scr var_9__scr_I tmp_58
mov EAX, *var_7__adr_scr;
mov EBX, *var_9__scr_I;
add EAX, EBX;
mov EBP[-3], EAX;
# IR: MOV tmp_58 var_57__b
mov EAX, EBP[9];
mov EBX, EBP[-3];
mov *EBX, EAX;
# IR: OP INC var_9__scr_I none tmp_59
mov EAX, *var_9__scr_I;
mov EBP[-7], EAX;
inc *var_9__scr_I;
# IR: LEAVE
sub ESP, -11;
ret;
# End code block cb_55
:var_7__adr_scr: db 0;
:var_9__scr_I: db 0;
:tmp_11: db 0;
:tmp_12: db 0;
:imm_18: db "Hello World!", 0;
