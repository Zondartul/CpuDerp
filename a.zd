# cb_1
mov EAX, 67536;
mov *var_6__adr_scr, EAX;
mov EAX, 0;
mov *var_8__scr_I, EAX;
call func_2__main;
add ESP, 0;
mov *tmp_10, eax;
call func_5__infloop;
add ESP, 0;
mov *tmp_11, eax;
# cb_56
:func_5__infloop:
:lbl_58__while_next:
# cb_60

mov EAX, imm_55__0;
cmp 1, EAX;
jz lbl_59__while_end;
# cb_62

jmp lbl_58__while_next;
:lbl_59__while_end:
ret;
# cb_12
:func_2__main:
push imm_17;
push 128;
push 255;
push 0;
call func_3__print;
add ESP, 4;
mov EBP[4], eax;
ret;
# cb_19
:func_3__print:
mov EAX, 0;
mov EBP[0], EAX;
:lbl_27__while_next:
# cb_29

mov EAX, imm_56__0;
cmp 1, EAX;
jz lbl_28__while_end;
# cb_31
mov EAX, EBP+0;
inc EAX;
mov EBP[4], EAX;
mov EAX, EBP-2;
mov EBX, EBP[4];
add EAX, EBX;
mov EBP[5], EAX;
mov EAX, EBP[5];
mov EBP[3], EAX;
push EBP[3];
push EBP[-3];
push EBP[-4];
push EBP[-5];
call func_4__putch;
add ESP, 4;
mov EBP[6], eax;

jmp lbl_27__while_next;
:lbl_28__while_end:
ret;
# cb_36
:func_4__putch:
mov EAX, var_8__scr_I;
mov EBX, 0;
add EAX, EBX;
mov EBP[1], EAX;
mov EAX, var_6__adr_scr;
mov EBX, EBP[1];
add EAX, EBX;
mov EBP[2], EAX;
mov EAX, EBP[-2];
mov EBP[2], EAX;
mov EAX, var_8__scr_I;
mov EBX, 1;
add EAX, EBX;
mov EBP[4], EAX;
mov EAX, var_6__adr_scr;
mov EBX, EBP[4];
add EAX, EBX;
mov EBP[5], EAX;
mov EAX, EBP[-3];
mov EBP[5], EAX;
mov EAX, var_8__scr_I;
mov EBX, 2;
add EAX, EBX;
mov EBP[7], EAX;
mov EAX, var_6__adr_scr;
mov EBX, EBP[7];
add EAX, EBX;
mov EBP[8], EAX;
mov EAX, EBP[-4];
mov EBP[8], EAX;
mov EAX, var_8__scr_I;
mov EBX, 3;
add EAX, EBX;
mov EBP[10], EAX;
mov EAX, var_6__adr_scr;
mov EBX, EBP[10];
add EAX, EBX;
mov EBP[11], EAX;
mov EAX, EBP[-5];
mov EBP[11], EAX;
mov EAX, var_8__scr_I;
mov EBX, 4;
add EAX, EBX;
mov EBP[13], EAX;
mov EAX, EBP[13];
mov *var_8__scr_I, EAX;
ret;
:var_6__adr_scr: db 0;
:var_8__scr_I: db 0;
:tmp_10: db 0;
:tmp_11: db 0;
:imm_17: db "Hello World!";
:imm_55__0: db "0";
:imm_56__0: db "0";
