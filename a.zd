#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_1
#generate_code_block.lbl_from
:lbl_from_2:
#generate_cmd.trace
# IR: MOV var_21__adr_scr imm_22
#generate_cmd_mov:emit(mov EAX, 67536;)
mov EAX, 67536;
#generate_cmd_mov:emit(mov EAX, 67536;).store
mov *var_21__adr_scr, EAX;
#generate_cmd.trace
# IR: MOV var_23__scr_I imm_24
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov *var_23__scr_I, EAX;
#generate_cmd.trace
# IR: MOV var_25__alloc_p imm_26
#generate_cmd_mov:emit(mov EAX, 10000;)
mov EAX, 10000;
#generate_cmd_mov:emit(mov EAX, 10000;).store
mov *var_25__alloc_p, EAX;
#generate_cmd.trace
# IR: MOV var_27__n_tiles_x imm_28
#generate_cmd_mov:emit(mov EAX, 56;)
mov EAX, 56;
#generate_cmd_mov:emit(mov EAX, 56;).store
mov *var_27__n_tiles_x, EAX;
#generate_cmd.trace
# IR: MOV var_29__n_tiles_y imm_30
#generate_cmd_mov:emit(mov EAX, 36;)
mov EAX, 36;
#generate_cmd_mov:emit(mov EAX, 36;).store
mov *var_29__n_tiles_y, EAX;
#generate_cmd.trace
# IR: CALL func_4__main [ ] tmp_31
#generate_cmd_call.call:emit(call func_4__main;)
call func_4__main;
#generate_cmd_call.stack:emit(add ESP, 0;)
add ESP, 0;
#generate_cmd_call.result:emit(mov *tmp_31, eax;)
mov *tmp_31, eax;
#generate_cmd.trace
# IR: CALL func_5__print [ imm_35 imm_34 imm_33 imm_32 ] tmp_36
#generate_cmd_call.args:emit(push imm_32;)
push imm_32;
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.args:emit(push 0;)
push 0;
#generate_cmd_call.args:emit(push 0;)
push 0;
#generate_cmd_call.call:emit(call func_5__print;)
call func_5__print;
#generate_cmd_call.stack:emit(add ESP, 16;)
add ESP, 16;
#generate_cmd_call.result:emit(mov *tmp_36, eax;)
mov *tmp_36, eax;
#generate_cmd.trace
# IR: CALL func_7__infloop [ ] tmp_37
#generate_cmd_call.call:emit(call func_7__infloop;)
call func_7__infloop;
#generate_cmd_call.stack:emit(add ESP, 0;)
add ESP, 0;
#generate_cmd_call.result:emit(mov *tmp_37, eax;)
mov *tmp_37, eax;
#generate_code_block.lbl_to
:lbl_to_3:
#generate_code_block.exit
# End code block cb_1
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_38
#generate_code_block.lbl_from
:func_4__main:
#generate_cmd.trace
# IR: ENTER scp_41__NULL
#generate_cmd_enter:emit(sub ESP, 163;)
sub ESP, 163;
#generate_cmd.trace
# IR: CALL func_5__print [ imm_45 imm_44 imm_43 imm_42 ] tmp_46
#generate_cmd_call.args:emit(push imm_42;)
push imm_42;
#generate_cmd_call.args:emit(push 128;)
push 128;
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.args:emit(push 0;)
push 0;
#generate_cmd_call.call:emit(call func_5__print;)
call func_5__print;
#generate_cmd_call.stack:emit(add ESP, 16;)
add ESP, 16;
#generate_cmd_call.result:emit(mov EBP[-19], eax;)
mov EBP[-19], eax;
#generate_cmd.trace
# IR: CALL func_13__dbg_print_num [ imm_47 ] tmp_48
#generate_cmd_call.args:emit(push 12345;)
push 12345;
#generate_cmd_call.call:emit(call func_13__dbg_print_num;)
call func_13__dbg_print_num;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-27], eax;)
mov EBP[-27], eax;
#generate_cmd.trace
# IR: CALL func_19__newline [ ] tmp_49
#generate_cmd_call.call:emit(call func_19__newline;)
call func_19__newline;
#generate_cmd_call.stack:emit(add ESP, 0;)
add ESP, 0;
#generate_cmd_call.result:emit(mov EBP[-31], eax;)
mov EBP[-31], eax;
#generate_cmd.trace
# IR: CALL func_14__dbg_print_s [ imm_50 ] tmp_51
#generate_cmd_call.args:emit(push imm_50;)
push imm_50;
#generate_cmd_call.call:emit(call func_14__dbg_print_s;)
call func_14__dbg_print_s;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-39], eax;)
mov EBP[-39], eax;
#generate_cmd.trace
# IR: CALL func_9__alloc [ imm_53 ] tmp_54
#generate_cmd_call.args:emit(push 10;)
push 10;
#generate_cmd_call.call:emit(call func_9__alloc;)
call func_9__alloc;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-51], eax;)
mov EBP[-51], eax;
#generate_cmd.trace
# IR: MOV var_52__args tmp_54
#load_value.truncate1
mov EAX, EBP[-51];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-119], EAX;)
mov EBP[-119], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-119];)
mov EAX, EBP[-119];
#generate_cmd_mov:emit(mov EAX, EBP[-119];).store
mov EBP[-43], EAX;
#generate_cmd.trace
# IR: OP INDEX var_52__args imm_55 tmp_56
#generate_cmd_op.arg1:emit(mov EAX, EBP[-43];)
mov EAX, EBP[-43];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-43];).store
mov EBP[-123], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-127], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 4;)
mul EAX, 4;
#generate_cmd_op.index_step:emit(mul EAX, 4;).store
mov EBP[-127], EAX;
#promote:emit(mov EAX, EBP[-123];)
mov EAX, EBP[-123];
#generate_cmd_op.op_str:emit(add EAX, EBP[-127];)
add EAX, EBP[-127];
#generate_cmd_op.op_str:emit(add EAX, EBP[-127];).store
mov EBP[-123], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-123];)
mov EAX, EBP[-123];
#generate_cmd_op.result1:emit(mov EAX, EBP[-123];).store
mov EBP[-59], EAX;
#generate_cmd.trace
# IR: MOV tmp_56 imm_57
#generate_cmd_mov:emit(mov EAX, imm_57;)
mov EAX, imm_57;
#generate_cmd_mov:emit(mov EAX, imm_57;).store_deref_3
mov EBX, EBP[-59];
#generate_cmd_mov:emit(mov EAX, imm_57;).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: OP INDEX var_52__args imm_58 tmp_59
#generate_cmd_op.arg1:emit(mov EAX, EBP[-43];)
mov EAX, EBP[-43];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-43];).store
mov EBP[-135], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 1;)
mov EAX, 1;
#generate_cmd_op.find_b:emit(mov EAX, 1;).store
mov EBP[-139], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 4;)
mul EAX, 4;
#generate_cmd_op.index_step:emit(mul EAX, 4;).store
mov EBP[-139], EAX;
#promote:emit(mov EAX, EBP[-135];)
mov EAX, EBP[-135];
#generate_cmd_op.op_str:emit(add EAX, EBP[-139];)
add EAX, EBP[-139];
#generate_cmd_op.op_str:emit(add EAX, EBP[-139];).store
mov EBP[-135], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-135];)
mov EAX, EBP[-135];
#generate_cmd_op.result1:emit(mov EAX, EBP[-135];).store
mov EBP[-71], EAX;
#generate_cmd.trace
# IR: MOV tmp_59 imm_60
#generate_cmd_mov:emit(mov EAX, 123;)
mov EAX, 123;
#generate_cmd_mov:emit(mov EAX, 123;).store_deref_3
mov EBX, EBP[-71];
#generate_cmd_mov:emit(mov EAX, 123;).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: CALL func_20__printf [ var_52__args imm_61 ] tmp_62
#generate_cmd_call.args:emit(push imm_61;)
push imm_61;
#generate_cmd_call.args:emit(push EBP[-43];)
push EBP[-43];
#generate_cmd_call.call:emit(call func_20__printf;)
call func_20__printf;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-83], eax;)
mov EBP[-83], eax;
#generate_cmd.trace
# IR: OP INDEX var_52__args imm_63 tmp_64
#generate_cmd_op.arg1:emit(mov EAX, EBP[-43];)
mov EAX, EBP[-43];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-43];).store
mov EBP[-147], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-151], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 4;)
mul EAX, 4;
#generate_cmd_op.index_step:emit(mul EAX, 4;).store
mov EBP[-151], EAX;
#promote:emit(mov EAX, EBP[-147];)
mov EAX, EBP[-147];
#generate_cmd_op.op_str:emit(add EAX, EBP[-151];)
add EAX, EBP[-151];
#generate_cmd_op.op_str:emit(add EAX, EBP[-151];).store
mov EBP[-147], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-147];)
mov EAX, EBP[-147];
#generate_cmd_op.result1:emit(mov EAX, EBP[-147];).store
mov EBP[-91], EAX;
#generate_cmd.trace
# IR: CALL func_11__strlen [ imm_65 ] tmp_66
#generate_cmd_call.args:emit(push imm_65;)
push imm_65;
#generate_cmd_call.call:emit(call func_11__strlen;)
call func_11__strlen;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-99], eax;)
mov EBP[-99], eax;
#generate_cmd.trace
# IR: MOV tmp_64 tmp_66
#load_value.truncate1
mov EAX, EBP[-99];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-159], EAX;)
mov EBP[-159], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-159];)
mov EAX, EBP[-159];
#generate_cmd_mov:emit(mov EAX, EBP[-159];).store_deref_3
mov EBX, EBP[-91];
#generate_cmd_mov:emit(mov EAX, EBP[-159];).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: CALL func_20__printf [ var_52__args imm_67 ] tmp_68
#generate_cmd_call.args:emit(push imm_67;)
push imm_67;
#generate_cmd_call.args:emit(push EBP[-43];)
push EBP[-43];
#generate_cmd_call.call:emit(call func_20__printf;)
call func_20__printf;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-107], eax;)
mov EBP[-107], eax;
#generate_cmd.trace
# IR: CALL func_20__printf [ var_52__args imm_69 ] tmp_70
#generate_cmd_call.args:emit(push imm_69;)
push imm_69;
#generate_cmd_call.args:emit(push EBP[-43];)
push EBP[-43];
#generate_cmd_call.call:emit(call func_20__printf;)
call func_20__printf;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-115], eax;)
mov EBP[-115], eax;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -163;)
sub ESP, -163;
#maybe_emit_func_ret(cb_38)
ret;
#generate_code_block.lbl_to
:lbl_to_40:
#generate_code_block.exit
# End code block cb_38
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_111
#generate_code_block.lbl_from
:func_5__print:
#generate_cmd.trace
# IR: ENTER scp_114__NULL
#generate_cmd_enter:emit(sub ESP, 99;)
sub ESP, 99;
#generate_cmd.trace
# IR: MOV var_119__i imm_120
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: OP INDEX var_118__str imm_122 tmp_123
#generate_cmd_op.arg1:emit(mov EAX, EBP[21];)
mov EAX, EBP[21];
#generate_cmd_op.arg1:emit(mov EAX, EBP[21];).store
mov EBP[-35], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-39], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-39], EAX;
#promote:emit(mov EAX, EBP[-35];)
mov EAX, EBP[-35];
#generate_cmd_op.op_str:emit(add EAX, EBP[-39];)
add EAX, EBP[-39];
#generate_cmd_op.op_str:emit(add EAX, EBP[-39];).store
mov EBP[-35], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-35];)
mov EAX, EBP[-35];
#generate_cmd_op.result1:emit(mov EAX, EBP[-35];).store
mov EBP[-19], EAX;
#generate_cmd.trace
# IR: MOV var_121__c tmp_123
#promote:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#emit.needs_deref_3(tmp_123):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-47], EAX;)
mov EBP[-47], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-51], EAX;)
mov EBP[-51], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-51];)
mov EAX, EBP[-51];
#generate_cmd_mov:emit(mov EAX, EBP[-51];).store
mov EBP[-11], EAX;
#generate_cmd.trace
# IR: WHILE cb_126 var_121__c cb_129 lbl_124__while_next lbl_125__while_end
#generate_cmd_while.lbl_next:emit(:lbl_124__while_next:)
:lbl_124__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_126
#generate_code_block.lbl_from
:lbl_from_127:
#generate_code_block.lbl_to
:lbl_to_128:
#generate_code_block.exit
# End code block cb_126
#load_value.truncate1
mov EAX, EBP[-11];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-59], EAX;)
mov EBP[-59], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp EBP[-59], EAX;)
cmp EBP[-59], EAX;
#generate_cmd_while.jz_end:emit(jz lbl_125__while_end;)
jz lbl_125__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_129
#generate_code_block.lbl_from
:lbl_from_130:
#generate_cmd.trace
# IR: CALL func_6__putch [ var_115__b var_116__g var_117__r var_121__c ] tmp_132
#load_value.truncate1
mov EAX, EBP[-11];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-63], EAX;)
mov EBP[-63], EAX;
#generate_cmd_call.args:emit(push EBP[-63];)
push EBP[-63];
#load_value.truncate1
mov EAX, EBP[17];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-67], EAX;)
mov EBP[-67], EAX;
#generate_cmd_call.args:emit(push EBP[-67];)
push EBP[-67];
#load_value.truncate1
mov EAX, EBP[13];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-71], EAX;)
mov EBP[-71], EAX;
#generate_cmd_call.args:emit(push EBP[-71];)
push EBP[-71];
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-75], EAX;)
mov EBP[-75], EAX;
#generate_cmd_call.args:emit(push EBP[-75];)
push EBP[-75];
#generate_cmd_call.call:emit(call func_6__putch;)
call func_6__putch;
#generate_cmd_call.stack:emit(add ESP, 16;)
add ESP, 16;
#generate_cmd_call.result:emit(mov EBP[-23], eax;)
mov EBP[-23], eax;
#generate_cmd.trace
# IR: OP INC var_119__i none tmp_133
#generate_cmd_op.result2:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.result2:emit(mov EAX, EBP[-3];).store
mov EBP[-27], EAX;
#generate_cmd_op.op_str:emit(inc EBP[-3];)
inc EBP[-3];
#generate_cmd.trace
# IR: OP INDEX var_118__str var_119__i tmp_134
#generate_cmd_op.arg1:emit(mov EAX, EBP[21];)
mov EAX, EBP[21];
#generate_cmd_op.arg1:emit(mov EAX, EBP[21];).store
mov EBP[-79], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];).store
mov EBP[-83], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-83], EAX;
#promote:emit(mov EAX, EBP[-79];)
mov EAX, EBP[-79];
#generate_cmd_op.op_str:emit(add EAX, EBP[-83];)
add EAX, EBP[-83];
#generate_cmd_op.op_str:emit(add EAX, EBP[-83];).store
mov EBP[-79], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-79];)
mov EAX, EBP[-79];
#generate_cmd_op.result1:emit(mov EAX, EBP[-79];).store
mov EBP[-31], EAX;
#generate_cmd.trace
# IR: MOV var_121__c tmp_134
#promote:emit(mov EAX, EBP[-31];)
mov EAX, EBP[-31];
#emit.needs_deref_3(tmp_134):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-91], EAX;)
mov EBP[-91], EAX;
#load_value.truncate1
mov EAX, EBP[-91];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-95], EAX;)
mov EBP[-95], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-95];)
mov EAX, EBP[-95];
#generate_cmd_mov:emit(mov EAX, EBP[-95];).store
mov EBP[-11], EAX;
#generate_code_block.lbl_to
:lbl_to_131:
#generate_code_block.exit
# End code block cb_129
#generate_cmd_while.jmp_next:emit(jmp lbl_124__while_next;)
jmp lbl_124__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_125__while_end:)
:lbl_125__while_end:
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -99;)
sub ESP, -99;
#maybe_emit_func_ret(cb_111)
ret;
#generate_code_block.lbl_to
:lbl_to_113:
#generate_code_block.exit
# End code block cb_111
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_160
#generate_code_block.lbl_from
:func_7__infloop:
#generate_cmd.trace
# IR: ENTER scp_163__NULL
#generate_cmd_enter:emit(sub ESP, 11;)
sub ESP, 11;
#generate_cmd.trace
# IR: WHILE cb_166 imm_169 cb_170 lbl_164__while_next lbl_165__while_end
#generate_cmd_while.lbl_next:emit(:lbl_164__while_next:)
:lbl_164__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_166
#generate_code_block.lbl_from
:lbl_from_167:
#generate_code_block.lbl_to
:lbl_to_168:
#generate_code_block.exit
# End code block cb_166
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp 1, EAX;)
cmp 1, EAX;
#generate_cmd_while.jz_end:emit(jz lbl_165__while_end;)
jz lbl_165__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_170
#generate_code_block.lbl_from
:lbl_from_171:
#generate_code_block.lbl_to
:lbl_to_172:
#generate_code_block.exit
# End code block cb_170
#generate_cmd_while.jmp_next:emit(jmp lbl_164__while_next;)
jmp lbl_164__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_165__while_end:)
:lbl_165__while_end:
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -11;)
sub ESP, -11;
#maybe_emit_func_ret(cb_160)
ret;
#generate_code_block.lbl_to
:lbl_to_162:
#generate_code_block.exit
# End code block cb_160
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_366
#generate_code_block.lbl_from
:func_13__dbg_print_num:
#generate_cmd.trace
# IR: ENTER scp_369__NULL
#generate_cmd_enter:emit(sub ESP, 199;)
sub ESP, 199;
#generate_cmd.trace
# IR: IF cb_371 tmp_375 cb_376
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_371
#generate_code_block.lbl_from
:lbl_from_372:
#generate_cmd.trace
# IR: OP EQUAL var_370__num imm_374 tmp_375
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-59], EAX;)
mov EBP[-59], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-59];)
mov EAX, EBP[-59];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-59];).store
mov EBP[-55], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-63], EAX;
#promote:emit(mov EAX, EBP[-55];)
mov EAX, EBP[-55];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-63];)
cmp EAX, EBP[-63];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-63];).store
mov EBP[-55], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-55];)
mov EAX, EBP[-55];
#generate_cmd_op.result1:emit(mov EAX, EBP[-55];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-71], EAX;)
mov EBP[-71], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-71];)
mov EAX, EBP[-71];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-71];).store
mov EBP[-67], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-67], CTRL;)
mov EBP[-67], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-67];)
mov EAX, EBP[-67];
#generate_cmd_op.result1:emit(mov EAX, EBP[-67];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-83], EAX;)
mov EBP[-83], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-83];)
mov EAX, EBP[-83];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-83];).store
mov EBP[-79], EAX;
#promote:emit(mov EAX, EBP[-79];)
mov EAX, EBP[-79];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-79], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-79];)
mov EAX, EBP[-79];
#generate_cmd_op.result1:emit(mov EAX, EBP[-79];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-91], EAX;)
mov EBP[-91], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-91];)
mov EAX, EBP[-91];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-91];).store
mov EBP[-87], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-87];)
bnot EBP[-87];
#generate_cmd_op.result1:emit(mov EAX, EBP[-87];)
mov EAX, EBP[-87];
#generate_cmd_op.result1:emit(mov EAX, EBP[-87];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-99], EAX;)
mov EBP[-99], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-99];)
mov EAX, EBP[-99];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-99];).store
mov EBP[-95], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-95];)
bnot EBP[-95];
#generate_cmd_op.result1:emit(mov EAX, EBP[-95];)
mov EAX, EBP[-95];
#generate_cmd_op.result1:emit(mov EAX, EBP[-95];).store
mov EBP[-7], EAX;
#generate_code_block.lbl_to
:lbl_to_373:
#generate_code_block.exit
# End code block cb_371
#load_value.truncate1
mov EAX, EBP[-7];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-103], EAX;)
mov EBP[-103], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-103], EAX;)
cmp EBP[-103], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_610__if_else;)
jz lbl_610__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_376
#generate_code_block.lbl_from
:lbl_from_377:
#generate_cmd.trace
# IR: CALL func_15__print_digit [ imm_379 ] tmp_380
#generate_cmd_call.args:emit(push 0;)
push 0;
#generate_cmd_call.call:emit(call func_15__print_digit;)
call func_15__print_digit;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-15], eax;)
mov EBP[-15], eax;
#generate_code_block.lbl_to
:lbl_to_378:
#generate_code_block.exit
# End code block cb_376
#generate_cmd_if.end_then:emit(jmp lbl_611__if_end;)
jmp lbl_611__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_610__if_else:)
:lbl_610__if_else:
#generate_cmd_if.end_if:emit(:lbl_611__if_end:)
:lbl_611__if_end:
#generate_cmd.trace
# IR: WHILE cb_383 tmp_387 cb_388 lbl_381__while_next lbl_382__while_end
#generate_cmd_while.lbl_next:emit(:lbl_381__while_next:)
:lbl_381__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_383
#generate_code_block.lbl_from
:lbl_from_384:
#generate_cmd.trace
# IR: OP GREATER var_370__num imm_386 tmp_387
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-115], EAX;)
mov EBP[-115], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-115];)
mov EAX, EBP[-115];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-115];).store
mov EBP[-111], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-119], EAX;
#promote:emit(mov EAX, EBP[-111];)
mov EAX, EBP[-111];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-119];)
cmp EAX, EBP[-119];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-119];).store
mov EBP[-111], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-111];)
mov EAX, EBP[-111];
#generate_cmd_op.result1:emit(mov EAX, EBP[-111];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-127], EAX;)
mov EBP[-127], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-127];)
mov EAX, EBP[-127];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-127];).store
mov EBP[-123], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-123], CTRL;)
mov EBP[-123], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-123];)
mov EAX, EBP[-123];
#generate_cmd_op.result1:emit(mov EAX, EBP[-123];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-139], EAX;)
mov EBP[-139], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-139];)
mov EAX, EBP[-139];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-139];).store
mov EBP[-135], EAX;
#promote:emit(mov EAX, EBP[-135];)
mov EAX, EBP[-135];
#generate_cmd_op.op_str:emit(band EAX, CMP_G;)
band EAX, CMP_G;
#generate_cmd_op.op_str:emit(band EAX, CMP_G;).store
mov EBP[-135], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-135];)
mov EAX, EBP[-135];
#generate_cmd_op.result1:emit(mov EAX, EBP[-135];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-147], EAX;)
mov EBP[-147], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-147];)
mov EAX, EBP[-147];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-147];).store
mov EBP[-143], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-143];)
bnot EBP[-143];
#generate_cmd_op.result1:emit(mov EAX, EBP[-143];)
mov EAX, EBP[-143];
#generate_cmd_op.result1:emit(mov EAX, EBP[-143];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-155], EAX;)
mov EBP[-155], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-155];)
mov EAX, EBP[-155];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-155];).store
mov EBP[-151], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-151];)
bnot EBP[-151];
#generate_cmd_op.result1:emit(mov EAX, EBP[-151];)
mov EAX, EBP[-151];
#generate_cmd_op.result1:emit(mov EAX, EBP[-151];).store
mov EBP[-23], EAX;
#generate_code_block.lbl_to
:lbl_to_385:
#generate_code_block.exit
# End code block cb_383
#load_value.truncate1
mov EAX, EBP[-23];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-159], EAX;)
mov EBP[-159], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp EBP[-159], EAX;)
cmp EBP[-159], EAX;
#generate_cmd_while.jz_end:emit(jz lbl_382__while_end;)
jz lbl_382__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_388
#generate_code_block.lbl_from
:lbl_from_389:
#generate_cmd.trace
# IR: OP MOD var_370__num imm_392 tmp_393
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-167], EAX;)
mov EBP[-167], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-167];)
mov EAX, EBP[-167];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-167];).store
mov EBP[-163], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 10;)
mov EAX, 10;
#generate_cmd_op.find_b:emit(mov EAX, 10;).store
mov EBP[-171], EAX;
#promote:emit(mov EAX, EBP[-163];)
mov EAX, EBP[-163];
#generate_cmd_op.op_str:emit(mod EAX, EBP[-171];)
mod EAX, EBP[-171];
#generate_cmd_op.op_str:emit(mod EAX, EBP[-171];).store
mov EBP[-163], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-163];)
mov EAX, EBP[-163];
#generate_cmd_op.result1:emit(mov EAX, EBP[-163];).store
mov EBP[-35], EAX;
#generate_cmd.trace
# IR: MOV var_391__digit tmp_393
#load_value.truncate1
mov EAX, EBP[-35];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-175], EAX;)
mov EBP[-175], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-175];)
mov EAX, EBP[-175];
#generate_cmd_mov:emit(mov EAX, EBP[-175];).store
mov EBP[-27], EAX;
#generate_cmd.trace
# IR: OP DIV var_370__num imm_394 tmp_395
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-183], EAX;)
mov EBP[-183], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-183];)
mov EAX, EBP[-183];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-183];).store
mov EBP[-179], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 10;)
mov EAX, 10;
#generate_cmd_op.find_b:emit(mov EAX, 10;).store
mov EBP[-187], EAX;
#promote:emit(mov EAX, EBP[-179];)
mov EAX, EBP[-179];
#generate_cmd_op.op_str:emit(div EAX, EBP[-187];)
div EAX, EBP[-187];
#generate_cmd_op.op_str:emit(div EAX, EBP[-187];).store
mov EBP[-179], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-179];)
mov EAX, EBP[-179];
#generate_cmd_op.result1:emit(mov EAX, EBP[-179];).store
mov EBP[-43], EAX;
#generate_cmd.trace
# IR: MOV var_370__num tmp_395
#load_value.truncate1
mov EAX, EBP[-43];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-191], EAX;)
mov EBP[-191], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-191];)
mov EAX, EBP[-191];
#generate_cmd_mov:emit(mov EAX, EBP[-191];).store
mov EBP[9], EAX;
#generate_cmd.trace
# IR: CALL func_15__print_digit [ var_391__digit ] tmp_396
#load_value.truncate1
mov EAX, EBP[-27];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-195], EAX;)
mov EBP[-195], EAX;
#generate_cmd_call.args:emit(push EBP[-195];)
push EBP[-195];
#generate_cmd_call.call:emit(call func_15__print_digit;)
call func_15__print_digit;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-47], eax;)
mov EBP[-47], eax;
#generate_code_block.lbl_to
:lbl_to_390:
#generate_code_block.exit
# End code block cb_388
#generate_cmd_while.jmp_next:emit(jmp lbl_381__while_next;)
jmp lbl_381__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_382__while_end:)
:lbl_382__while_end:
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -199;)
sub ESP, -199;
#maybe_emit_func_ret(cb_366)
ret;
#generate_code_block.lbl_to
:lbl_to_368:
#generate_code_block.exit
# End code block cb_366
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_569
#generate_code_block.lbl_from
:func_19__newline:
#generate_cmd.trace
# IR: ENTER scp_572__NULL
#generate_cmd_enter:emit(sub ESP, 95;)
sub ESP, 95;
#generate_cmd.trace
# IR: OP DIV var_23__scr_I imm_574 tmp_575
#generate_cmd_op.arg1:emit(mov EAX, *var_23__scr_I;)
mov EAX, *var_23__scr_I;
#generate_cmd_op.arg1:emit(mov EAX, *var_23__scr_I;).store
mov EBP[-39], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 7;)
mov EAX, 7;
#generate_cmd_op.find_b:emit(mov EAX, 7;).store
mov EBP[-43], EAX;
#promote:emit(mov EAX, EBP[-39];)
mov EAX, EBP[-39];
#generate_cmd_op.op_str:emit(div EAX, EBP[-43];)
div EAX, EBP[-43];
#generate_cmd_op.op_str:emit(div EAX, EBP[-43];).store
mov EBP[-39], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-39];)
mov EAX, EBP[-39];
#generate_cmd_op.result1:emit(mov EAX, EBP[-39];).store
mov EBP[-11], EAX;
#generate_cmd.trace
# IR: OP DIV tmp_575 var_27__n_tiles_x tmp_576
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];).store
mov EBP[-47], EAX;
#generate_cmd_op.find_b:emit(mov EAX, *var_27__n_tiles_x;)
mov EAX, *var_27__n_tiles_x;
#generate_cmd_op.find_b:emit(mov EAX, *var_27__n_tiles_x;).store
mov EBP[-51], EAX;
#promote:emit(mov EAX, EBP[-47];)
mov EAX, EBP[-47];
#generate_cmd_op.op_str:emit(div EAX, EBP[-51];)
div EAX, EBP[-51];
#generate_cmd_op.op_str:emit(div EAX, EBP[-51];).store
mov EBP[-47], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-47];)
mov EAX, EBP[-47];
#generate_cmd_op.result1:emit(mov EAX, EBP[-47];).store
mov EBP[-15], EAX;
#generate_cmd.trace
# IR: MOV var_573__n_lines tmp_576
#generate_cmd_mov:emit(mov EAX, EBP[-15];)
mov EAX, EBP[-15];
#generate_cmd_mov:emit(mov EAX, EBP[-15];).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: OP ADD var_573__n_lines imm_577 tmp_578
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-59], EAX;)
mov EBP[-59], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-59];)
mov EAX, EBP[-59];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-59];).store
mov EBP[-55], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 1;)
mov EAX, 1;
#generate_cmd_op.find_b:emit(mov EAX, 1;).store
mov EBP[-63], EAX;
#promote:emit(mov EAX, EBP[-55];)
mov EAX, EBP[-55];
#generate_cmd_op.op_str:emit(add EAX, EBP[-63];)
add EAX, EBP[-63];
#generate_cmd_op.op_str:emit(add EAX, EBP[-63];).store
mov EBP[-55], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-55];)
mov EAX, EBP[-55];
#generate_cmd_op.result1:emit(mov EAX, EBP[-55];).store
mov EBP[-23], EAX;
#generate_cmd.trace
# IR: OP MUL tmp_578 var_27__n_tiles_x tmp_579
#load_value.truncate1
mov EAX, EBP[-23];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-71], EAX;)
mov EBP[-71], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-71];)
mov EAX, EBP[-71];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-71];).store
mov EBP[-67], EAX;
#generate_cmd_op.find_b:emit(mov EAX, *var_27__n_tiles_x;)
mov EAX, *var_27__n_tiles_x;
#generate_cmd_op.find_b:emit(mov EAX, *var_27__n_tiles_x;).store
mov EBP[-75], EAX;
#promote:emit(mov EAX, EBP[-67];)
mov EAX, EBP[-67];
#generate_cmd_op.op_str:emit(mul EAX, EBP[-75];)
mul EAX, EBP[-75];
#generate_cmd_op.op_str:emit(mul EAX, EBP[-75];).store
mov EBP[-67], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-67];)
mov EAX, EBP[-67];
#generate_cmd_op.result1:emit(mov EAX, EBP[-67];).store
mov EBP[-27], EAX;
#generate_cmd.trace
# IR: OP MUL tmp_579 imm_580 tmp_581
#load_value.truncate1
mov EAX, EBP[-27];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-83], EAX;)
mov EBP[-83], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-83];)
mov EAX, EBP[-83];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-83];).store
mov EBP[-79], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 7;)
mov EAX, 7;
#generate_cmd_op.find_b:emit(mov EAX, 7;).store
mov EBP[-87], EAX;
#promote:emit(mov EAX, EBP[-79];)
mov EAX, EBP[-79];
#generate_cmd_op.op_str:emit(mul EAX, EBP[-87];)
mul EAX, EBP[-87];
#generate_cmd_op.op_str:emit(mul EAX, EBP[-87];).store
mov EBP[-79], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-79];)
mov EAX, EBP[-79];
#generate_cmd_op.result1:emit(mov EAX, EBP[-79];).store
mov EBP[-35], EAX;
#generate_cmd.trace
# IR: MOV var_23__scr_I tmp_581
#load_value.truncate1
mov EAX, EBP[-35];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-91], EAX;)
mov EBP[-91], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-91];)
mov EAX, EBP[-91];
#generate_cmd_mov:emit(mov EAX, EBP[-91];).store
mov *var_23__scr_I, EAX;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -95;)
sub ESP, -95;
#maybe_emit_func_ret(cb_569)
ret;
#generate_code_block.lbl_to
:lbl_to_571:
#generate_code_block.exit
# End code block cb_569
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_71
#generate_code_block.lbl_from
:func_14__dbg_print_s:
#generate_cmd.trace
# IR: ENTER scp_74__NULL
#generate_cmd_enter:emit(sub ESP, 131;)
sub ESP, 131;
#generate_cmd.trace
# IR: MOV var_76__i imm_77
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: WHILE cb_80 tmp_83 cb_84 lbl_78__while_next lbl_79__while_end
#generate_cmd_while.lbl_next:emit(:lbl_78__while_next:)
:lbl_78__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_80
#generate_code_block.lbl_from
:lbl_from_81:
#generate_cmd.trace
# IR: OP INDEX var_75__S var_76__i tmp_83
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];)
mov EAX, EBP[9];
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];).store
mov EBP[-67], EAX;
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-75], EAX;)
mov EBP[-75], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-75];)
mov EAX, EBP[-75];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-75];).store
mov EBP[-71], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-71], EAX;
#promote:emit(mov EAX, EBP[-67];)
mov EAX, EBP[-67];
#generate_cmd_op.op_str:emit(add EAX, EBP[-71];)
add EAX, EBP[-71];
#generate_cmd_op.op_str:emit(add EAX, EBP[-71];).store
mov EBP[-67], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-67];)
mov EAX, EBP[-67];
#generate_cmd_op.result1:emit(mov EAX, EBP[-67];).store
mov EBP[-11], EAX;
#generate_code_block.lbl_to
:lbl_to_82:
#generate_code_block.exit
# End code block cb_80
#promote:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#emit.needs_deref_3(tmp_83):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-83], EAX;)
mov EBP[-83], EAX;
#load_value.truncate1
mov EAX, EBP[-83];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-87], EAX;)
mov EBP[-87], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp EBP[-87], EAX;)
cmp EBP[-87], EAX;
#generate_cmd_while.jz_end:emit(jz lbl_79__while_end;)
jz lbl_79__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_84
#generate_code_block.lbl_from
:lbl_from_85:
#generate_cmd.trace
# IR: OP INDEX var_75__S var_76__i tmp_88
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];)
mov EAX, EBP[9];
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];).store
mov EBP[-91], EAX;
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-99], EAX;)
mov EBP[-99], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-99];)
mov EAX, EBP[-99];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-99];).store
mov EBP[-95], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-95], EAX;
#promote:emit(mov EAX, EBP[-91];)
mov EAX, EBP[-91];
#generate_cmd_op.op_str:emit(add EAX, EBP[-95];)
add EAX, EBP[-95];
#generate_cmd_op.op_str:emit(add EAX, EBP[-95];).store
mov EBP[-91], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-91];)
mov EAX, EBP[-91];
#generate_cmd_op.result1:emit(mov EAX, EBP[-91];).store
mov EBP[-19], EAX;
#generate_cmd.trace
# IR: MOV var_87__c tmp_88
#promote:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#emit.needs_deref_3(tmp_88):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-107], EAX;)
mov EBP[-107], EAX;
#load_value.truncate1
mov EAX, EBP[-107];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-111], EAX;)
mov EBP[-111], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-111];)
mov EAX, EBP[-111];
#generate_cmd_mov:emit(mov EAX, EBP[-111];).store
mov EBP[-15], EAX;
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_89 ] tmp_90
#generate_cmd_call.args:emit(push imm_89;)
push imm_89;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-27], eax;)
mov EBP[-27], eax;
#generate_cmd.trace
# IR: CALL func_13__dbg_print_num [ var_76__i ] tmp_91
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-115], EAX;)
mov EBP[-115], EAX;
#generate_cmd_call.args:emit(push EBP[-115];)
push EBP[-115];
#generate_cmd_call.call:emit(call func_13__dbg_print_num;)
call func_13__dbg_print_num;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-31], eax;)
mov EBP[-31], eax;
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_92 ] tmp_93
#generate_cmd_call.args:emit(push imm_92;)
push imm_92;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-39], eax;)
mov EBP[-39], eax;
#generate_cmd.trace
# IR: CALL func_17__printc [ var_87__c ] tmp_94
#load_value.truncate1
mov EAX, EBP[-15];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-119], EAX;)
mov EBP[-119], EAX;
#generate_cmd_call.args:emit(push EBP[-119];)
push EBP[-119];
#generate_cmd_call.call:emit(call func_17__printc;)
call func_17__printc;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-43], eax;)
mov EBP[-43], eax;
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_95 ] tmp_96
#generate_cmd_call.args:emit(push imm_95;)
push imm_95;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-51], eax;)
mov EBP[-51], eax;
#generate_cmd.trace
# IR: CALL func_19__newline [ ] tmp_97
#generate_cmd_call.call:emit(call func_19__newline;)
call func_19__newline;
#generate_cmd_call.stack:emit(add ESP, 0;)
add ESP, 0;
#generate_cmd_call.result:emit(mov EBP[-55], eax;)
mov EBP[-55], eax;
#generate_cmd.trace
# IR: OP INC var_76__i none tmp_98
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-123], EAX;)
mov EBP[-123], EAX;
#generate_cmd_op.result2:emit(mov EAX, EBP[-123];)
mov EAX, EBP[-123];
#generate_cmd_op.result2:emit(mov EAX, EBP[-123];).store
mov EBP[-59], EAX;
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-127], EAX;)
mov EBP[-127], EAX;
#generate_cmd_op.op_str:emit(inc EBP[-127];)
inc EBP[-127];
#generate_code_block.lbl_to
:lbl_to_86:
#generate_code_block.exit
# End code block cb_84
#generate_cmd_while.jmp_next:emit(jmp lbl_78__while_next;)
jmp lbl_78__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_79__while_end:)
:lbl_79__while_end:
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -131;)
sub ESP, -131;
#maybe_emit_func_ret(cb_71)
ret;
#generate_code_block.lbl_to
:lbl_to_73:
#generate_code_block.exit
# End code block cb_71
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_173
#generate_code_block.lbl_from
:func_9__alloc:
#generate_cmd.trace
# IR: ENTER scp_176__NULL
#generate_cmd_enter:emit(sub ESP, 19;)
sub ESP, 19;
#generate_cmd.trace
# IR: MOV var_178__res var_25__alloc_p
#generate_cmd_mov:emit(mov EAX, *var_25__alloc_p;)
mov EAX, *var_25__alloc_p;
#generate_cmd_mov:emit(mov EAX, *var_25__alloc_p;).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: OP ADD var_25__alloc_p var_177__size tmp_179
#generate_cmd_op.arg1:emit(mov EAX, *var_25__alloc_p;)
mov EAX, *var_25__alloc_p;
#generate_cmd_op.arg1:emit(mov EAX, *var_25__alloc_p;).store
mov EBP[-11], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[9];)
mov EAX, EBP[9];
#generate_cmd_op.find_b:emit(mov EAX, EBP[9];).store
mov EBP[-15], EAX;
#promote:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.op_str:emit(add EAX, EBP[-15];)
add EAX, EBP[-15];
#generate_cmd_op.op_str:emit(add EAX, EBP[-15];).store
mov EBP[-11], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.result1:emit(mov EAX, EBP[-11];).store
mov EBP[-7], EAX;
#generate_cmd.trace
# IR: MOV var_25__alloc_p tmp_179
#generate_cmd_mov:emit(mov EAX, EBP[-7];)
mov EAX, EBP[-7];
#generate_cmd_mov:emit(mov EAX, EBP[-7];).store
mov *var_25__alloc_p, EAX;
#generate_cmd.trace
# IR: RETURN var_178__res
#generate_cmd_return.arg:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_return.leave:emit(sub ESP, -19;)
sub ESP, -19;
#generate_cmd_return.ret:emit(ret;)
ret;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -19;)
sub ESP, -19;
#maybe_emit_func_ret(cb_173)
ret;
#generate_code_block.lbl_to
:lbl_to_175:
#generate_code_block.exit
# End code block cb_173
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_202
#generate_code_block.lbl_from
:func_20__printf:
#generate_cmd.trace
# IR: ENTER scp_205__NULL
#generate_cmd_enter:emit(sub ESP, 823;)
sub ESP, 823;
#generate_cmd.trace
# IR: MOV var_208__I imm_209
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: MOV var_210__argI imm_211
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-11], EAX;
#generate_cmd.trace
# IR: OP INDEX var_207__fmt var_208__I tmp_213
#generate_cmd_op.arg1:emit(mov EAX, EBP[13];)
mov EAX, EBP[13];
#generate_cmd_op.arg1:emit(mov EAX, EBP[13];).store
mov EBP[-255], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];).store
mov EBP[-259], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-259], EAX;
#promote:emit(mov EAX, EBP[-255];)
mov EAX, EBP[-255];
#generate_cmd_op.op_str:emit(add EAX, EBP[-259];)
add EAX, EBP[-259];
#generate_cmd_op.op_str:emit(add EAX, EBP[-259];).store
mov EBP[-255], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-255];)
mov EAX, EBP[-255];
#generate_cmd_op.result1:emit(mov EAX, EBP[-255];).store
mov EBP[-23], EAX;
#generate_cmd.trace
# IR: MOV var_212__c tmp_213
#promote:emit(mov EAX, EBP[-23];)
mov EAX, EBP[-23];
#emit.needs_deref_3(tmp_213):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-267], EAX;)
mov EBP[-267], EAX;
#load_value.truncate1
mov EAX, EBP[-267];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-271], EAX;)
mov EBP[-271], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-271];)
mov EAX, EBP[-271];
#generate_cmd_mov:emit(mov EAX, EBP[-271];).store
mov EBP[-19], EAX;
#generate_cmd.trace
# IR: MOV var_214__arg imm_215
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-27], EAX;
#generate_cmd.trace
# IR: WHILE cb_218 var_212__c cb_221 lbl_216__while_next lbl_217__while_end
#generate_cmd_while.lbl_next:emit(:lbl_216__while_next:)
:lbl_216__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_218
#generate_code_block.lbl_from
:lbl_from_219:
#generate_code_block.lbl_to
:lbl_to_220:
#generate_code_block.exit
# End code block cb_218
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-279], EAX;)
mov EBP[-279], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp EBP[-279], EAX;)
cmp EBP[-279], EAX;
#generate_cmd_while.jz_end:emit(jz lbl_217__while_end;)
jz lbl_217__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_221
#generate_code_block.lbl_from
:lbl_from_222:
#generate_cmd.trace
# IR: OP INC var_208__I none tmp_224
#generate_cmd_op.result2:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.result2:emit(mov EAX, EBP[-3];).store
mov EBP[-35], EAX;
#generate_cmd_op.op_str:emit(inc EBP[-3];)
inc EBP[-3];
#generate_cmd.trace
# IR: CALL func_110__dbg_print_si [ var_208__I imm_225 ] tmp_226
#generate_cmd_call.args:emit(push imm_225;)
push imm_225;
#generate_cmd_call.args:emit(push EBP[-3];)
push EBP[-3];
#generate_cmd_call.call:emit(call func_110__dbg_print_si;)
call func_110__dbg_print_si;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-43], eax;)
mov EBP[-43], eax;
#generate_cmd.trace
# IR: OP INDEX var_207__fmt var_208__I tmp_228
#generate_cmd_op.arg1:emit(mov EAX, EBP[13];)
mov EAX, EBP[13];
#generate_cmd_op.arg1:emit(mov EAX, EBP[13];).store
mov EBP[-283], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];).store
mov EBP[-287], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-287], EAX;
#promote:emit(mov EAX, EBP[-283];)
mov EAX, EBP[-283];
#generate_cmd_op.op_str:emit(add EAX, EBP[-287];)
add EAX, EBP[-287];
#generate_cmd_op.op_str:emit(add EAX, EBP[-287];).store
mov EBP[-283], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-283];)
mov EAX, EBP[-283];
#generate_cmd_op.result1:emit(mov EAX, EBP[-283];).store
mov EBP[-51], EAX;
#generate_cmd.trace
# IR: MOV var_227__c2 tmp_228
#promote:emit(mov EAX, EBP[-51];)
mov EAX, EBP[-51];
#emit.needs_deref_3(tmp_228):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-295], EAX;)
mov EBP[-295], EAX;
#load_value.truncate1
mov EAX, EBP[-295];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-299], EAX;)
mov EBP[-299], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-299];)
mov EAX, EBP[-299];
#generate_cmd_mov:emit(mov EAX, EBP[-299];).store
mov EBP[-47], EAX;
#generate_cmd.trace
# IR: CALL func_110__dbg_print_si [ var_227__c2 imm_229 ] tmp_230
#generate_cmd_call.args:emit(push imm_229;)
push imm_229;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-303], EAX;)
mov EBP[-303], EAX;
#generate_cmd_call.args:emit(push EBP[-303];)
push EBP[-303];
#generate_cmd_call.call:emit(call func_110__dbg_print_si;)
call func_110__dbg_print_si;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-59], eax;)
mov EBP[-59], eax;
#generate_cmd.trace
# IR: IF cb_231 var_227__c2 cb_234
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_231
#generate_code_block.lbl_from
:lbl_from_232:
#generate_code_block.lbl_to
:lbl_to_233:
#generate_code_block.exit
# End code block cb_231
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-311], EAX;)
mov EBP[-311], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-311], EAX;)
cmp EBP[-311], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_695__if_else;)
jz lbl_695__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_234
#generate_code_block.lbl_from
:lbl_from_235:
#generate_cmd.trace
# IR: CALL func_110__dbg_print_si [ var_212__c imm_237 ] tmp_238
#generate_cmd_call.args:emit(push imm_237;)
push imm_237;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-315], EAX;)
mov EBP[-315], EAX;
#generate_cmd_call.args:emit(push EBP[-315];)
push EBP[-315];
#generate_cmd_call.call:emit(call func_110__dbg_print_si;)
call func_110__dbg_print_si;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-67], eax;)
mov EBP[-67], eax;
#generate_cmd.trace
# IR: OP INDEX imm_240 imm_241 tmp_242
#generate_cmd_op.arg1:emit(mov EAX, imm_240;)
mov EAX, imm_240;
#generate_cmd_op.arg1:emit(mov EAX, imm_240;).store
mov EBP[-319], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-323], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-323], EAX;
#promote:emit(mov EAX, EBP[-319];)
mov EAX, EBP[-319];
#generate_cmd_op.op_str:emit(add EAX, EBP[-323];)
add EAX, EBP[-323];
#generate_cmd_op.op_str:emit(add EAX, EBP[-323];).store
mov EBP[-319], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-319];)
mov EAX, EBP[-319];
#generate_cmd_op.result1:emit(mov EAX, EBP[-319];).store
mov EBP[-83], EAX;
#generate_cmd.trace
# IR: CALL func_110__dbg_print_si [ tmp_242 imm_239 ] tmp_243
#generate_cmd_call.args:emit(push imm_239;)
push imm_239;
#promote:emit(mov EAX, EBP[-83];)
mov EAX, EBP[-83];
#emit.needs_deref_3(tmp_242):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-331], EAX;)
mov EBP[-331], EAX;
#load_value.truncate1
mov EAX, EBP[-331];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-335], EAX;)
mov EBP[-335], EAX;
#generate_cmd_call.args:emit(push EBP[-335];)
push EBP[-335];
#generate_cmd_call.call:emit(call func_110__dbg_print_si;)
call func_110__dbg_print_si;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-87], eax;)
mov EBP[-87], eax;
#generate_cmd.trace
# IR: OP INDEX imm_245 imm_246 tmp_247
#generate_cmd_op.arg1:emit(mov EAX, imm_245;)
mov EAX, imm_245;
#generate_cmd_op.arg1:emit(mov EAX, imm_245;).store
mov EBP[-339], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-343], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-343], EAX;
#promote:emit(mov EAX, EBP[-339];)
mov EAX, EBP[-339];
#generate_cmd_op.op_str:emit(add EAX, EBP[-343];)
add EAX, EBP[-343];
#generate_cmd_op.op_str:emit(add EAX, EBP[-343];).store
mov EBP[-339], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-339];)
mov EAX, EBP[-339];
#generate_cmd_op.result1:emit(mov EAX, EBP[-339];).store
mov EBP[-103], EAX;
#generate_cmd.trace
# IR: OP EQUAL var_212__c tmp_247 tmp_248
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-355], EAX;)
mov EBP[-355], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-355];)
mov EAX, EBP[-355];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-355];).store
mov EBP[-351], EAX;
#promote:emit(mov EAX, EBP[-103];)
mov EAX, EBP[-103];
#emit.needs_deref_3(tmp_247):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-363], EAX;)
mov EBP[-363], EAX;
#load_value.truncate1
mov EAX, EBP[-363];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-367], EAX;)
mov EBP[-367], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-367];)
mov EAX, EBP[-367];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-367];).store
mov EBP[-359], EAX;
#promote:emit(mov EAX, EBP[-351];)
mov EAX, EBP[-351];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-359];)
cmp EAX, EBP[-359];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-359];).store
mov EBP[-351], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-351];)
mov EAX, EBP[-351];
#generate_cmd_op.result1:emit(mov EAX, EBP[-351];).store
mov EBP[-107], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-375], EAX;)
mov EBP[-375], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-375];)
mov EAX, EBP[-375];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-375];).store
mov EBP[-371], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-371], CTRL;)
mov EBP[-371], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-371];)
mov EAX, EBP[-371];
#generate_cmd_op.result1:emit(mov EAX, EBP[-371];).store
mov EBP[-107], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-387], EAX;)
mov EBP[-387], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-387];)
mov EAX, EBP[-387];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-387];).store
mov EBP[-383], EAX;
#promote:emit(mov EAX, EBP[-383];)
mov EAX, EBP[-383];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-383], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-383];)
mov EAX, EBP[-383];
#generate_cmd_op.result1:emit(mov EAX, EBP[-383];).store
mov EBP[-107], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-395], EAX;)
mov EBP[-395], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-395];)
mov EAX, EBP[-395];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-395];).store
mov EBP[-391], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-391];)
bnot EBP[-391];
#generate_cmd_op.result1:emit(mov EAX, EBP[-391];)
mov EAX, EBP[-391];
#generate_cmd_op.result1:emit(mov EAX, EBP[-391];).store
mov EBP[-107], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-403], EAX;)
mov EBP[-403], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-403];)
mov EAX, EBP[-403];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-403];).store
mov EBP[-399], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-399];)
bnot EBP[-399];
#generate_cmd_op.result1:emit(mov EAX, EBP[-399];)
mov EAX, EBP[-399];
#generate_cmd_op.result1:emit(mov EAX, EBP[-399];).store
mov EBP[-107], EAX;
#generate_cmd.trace
# IR: MOV var_244__is_perc tmp_248
#load_value.truncate1
mov EAX, EBP[-107];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-407], EAX;)
mov EBP[-407], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-407];)
mov EAX, EBP[-407];
#generate_cmd_mov:emit(mov EAX, EBP[-407];).store
mov EBP[-91], EAX;
#generate_cmd.trace
# IR: OP INDEX imm_250 imm_251 tmp_252
#generate_cmd_op.arg1:emit(mov EAX, imm_250;)
mov EAX, imm_250;
#generate_cmd_op.arg1:emit(mov EAX, imm_250;).store
mov EBP[-411], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-415], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-415], EAX;
#promote:emit(mov EAX, EBP[-411];)
mov EAX, EBP[-411];
#generate_cmd_op.op_str:emit(add EAX, EBP[-415];)
add EAX, EBP[-415];
#generate_cmd_op.op_str:emit(add EAX, EBP[-415];).store
mov EBP[-411], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-411];)
mov EAX, EBP[-411];
#generate_cmd_op.result1:emit(mov EAX, EBP[-411];).store
mov EBP[-123], EAX;
#generate_cmd.trace
# IR: OP EQUAL var_212__c tmp_252 tmp_253
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-427], EAX;)
mov EBP[-427], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-427];)
mov EAX, EBP[-427];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-427];).store
mov EBP[-423], EAX;
#promote:emit(mov EAX, EBP[-123];)
mov EAX, EBP[-123];
#emit.needs_deref_3(tmp_252):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-435], EAX;)
mov EBP[-435], EAX;
#load_value.truncate1
mov EAX, EBP[-435];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-439], EAX;)
mov EBP[-439], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-439];)
mov EAX, EBP[-439];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-439];).store
mov EBP[-431], EAX;
#promote:emit(mov EAX, EBP[-423];)
mov EAX, EBP[-423];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-431];)
cmp EAX, EBP[-431];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-431];).store
mov EBP[-423], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-423];)
mov EAX, EBP[-423];
#generate_cmd_op.result1:emit(mov EAX, EBP[-423];).store
mov EBP[-127], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-447], EAX;)
mov EBP[-447], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-447];)
mov EAX, EBP[-447];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-447];).store
mov EBP[-443], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-443], CTRL;)
mov EBP[-443], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-443];)
mov EAX, EBP[-443];
#generate_cmd_op.result1:emit(mov EAX, EBP[-443];).store
mov EBP[-127], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-459], EAX;)
mov EBP[-459], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-459];)
mov EAX, EBP[-459];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-459];).store
mov EBP[-455], EAX;
#promote:emit(mov EAX, EBP[-455];)
mov EAX, EBP[-455];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-455], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-455];)
mov EAX, EBP[-455];
#generate_cmd_op.result1:emit(mov EAX, EBP[-455];).store
mov EBP[-127], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-467], EAX;)
mov EBP[-467], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-467];)
mov EAX, EBP[-467];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-467];).store
mov EBP[-463], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-463];)
bnot EBP[-463];
#generate_cmd_op.result1:emit(mov EAX, EBP[-463];)
mov EAX, EBP[-463];
#generate_cmd_op.result1:emit(mov EAX, EBP[-463];).store
mov EBP[-127], EAX;
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-475], EAX;)
mov EBP[-475], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-475];)
mov EAX, EBP[-475];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-475];).store
mov EBP[-471], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-471];)
bnot EBP[-471];
#generate_cmd_op.result1:emit(mov EAX, EBP[-471];)
mov EAX, EBP[-471];
#generate_cmd_op.result1:emit(mov EAX, EBP[-471];).store
mov EBP[-127], EAX;
#generate_cmd.trace
# IR: MOV var_249__is_bsl tmp_253
#load_value.truncate1
mov EAX, EBP[-127];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-479], EAX;)
mov EBP[-479], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-479];)
mov EAX, EBP[-479];
#generate_cmd_mov:emit(mov EAX, EBP[-479];).store
mov EBP[-111], EAX;
#generate_cmd.trace
# IR: OP ADD var_244__is_perc var_249__is_bsl tmp_255
#load_value.truncate1
mov EAX, EBP[-91];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-487], EAX;)
mov EBP[-487], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-487];)
mov EAX, EBP[-487];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-487];).store
mov EBP[-483], EAX;
#load_value.truncate1
mov EAX, EBP[-111];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-495], EAX;)
mov EBP[-495], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-495];)
mov EAX, EBP[-495];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-495];).store
mov EBP[-491], EAX;
#promote:emit(mov EAX, EBP[-483];)
mov EAX, EBP[-483];
#generate_cmd_op.op_str:emit(add EAX, EBP[-491];)
add EAX, EBP[-491];
#generate_cmd_op.op_str:emit(add EAX, EBP[-491];).store
mov EBP[-483], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-483];)
mov EAX, EBP[-483];
#generate_cmd_op.result1:emit(mov EAX, EBP[-483];).store
mov EBP[-135], EAX;
#generate_cmd.trace
# IR: MOV var_254__is_spec tmp_255
#load_value.truncate1
mov EAX, EBP[-135];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-499], EAX;)
mov EBP[-499], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-499];)
mov EAX, EBP[-499];
#generate_cmd_mov:emit(mov EAX, EBP[-499];).store
mov EBP[-131], EAX;
#generate_cmd.trace
# IR: CALL func_110__dbg_print_si [ var_244__is_perc imm_256 ] tmp_257
#generate_cmd_call.args:emit(push imm_256;)
push imm_256;
#load_value.truncate1
mov EAX, EBP[-91];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-503], EAX;)
mov EBP[-503], EAX;
#generate_cmd_call.args:emit(push EBP[-503];)
push EBP[-503];
#generate_cmd_call.call:emit(call func_110__dbg_print_si;)
call func_110__dbg_print_si;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-143], eax;)
mov EBP[-143], eax;
#generate_cmd.trace
# IR: CALL func_110__dbg_print_si [ var_249__is_bsl imm_258 ] tmp_259
#generate_cmd_call.args:emit(push imm_258;)
push imm_258;
#load_value.truncate1
mov EAX, EBP[-111];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-507], EAX;)
mov EBP[-507], EAX;
#generate_cmd_call.args:emit(push EBP[-507];)
push EBP[-507];
#generate_cmd_call.call:emit(call func_110__dbg_print_si;)
call func_110__dbg_print_si;
#generate_cmd_call.stack:emit(add ESP, 8;)
add ESP, 8;
#generate_cmd_call.result:emit(mov EBP[-151], eax;)
mov EBP[-151], eax;
#generate_cmd.trace
# IR: IF cb_260 var_254__is_spec cb_263
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_260
#generate_code_block.lbl_from
:lbl_from_261:
#generate_code_block.lbl_to
:lbl_to_262:
#generate_code_block.exit
# End code block cb_260
#load_value.truncate1
mov EAX, EBP[-131];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-515], EAX;)
mov EBP[-515], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-515], EAX;)
cmp EBP[-515], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_748__if_else;)
jz lbl_748__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_263
#generate_code_block.lbl_from
:lbl_from_264:
#generate_cmd.trace
# IR: OP INC var_208__I none tmp_266
#generate_cmd_op.result2:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.result2:emit(mov EAX, EBP[-3];).store
mov EBP[-155], EAX;
#generate_cmd_op.op_str:emit(inc EBP[-3];)
inc EBP[-3];
#generate_cmd.trace
# IR: IF cb_267 tmp_273 cb_274
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_267
#generate_code_block.lbl_from
:lbl_from_268:
#generate_cmd.trace
# IR: OP INDEX imm_270 imm_271 tmp_272
#generate_cmd_op.arg1:emit(mov EAX, imm_270;)
mov EAX, imm_270;
#generate_cmd_op.arg1:emit(mov EAX, imm_270;).store
mov EBP[-523], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-527], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-527], EAX;
#promote:emit(mov EAX, EBP[-523];)
mov EAX, EBP[-523];
#generate_cmd_op.op_str:emit(add EAX, EBP[-527];)
add EAX, EBP[-527];
#generate_cmd_op.op_str:emit(add EAX, EBP[-527];).store
mov EBP[-523], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-523];)
mov EAX, EBP[-523];
#generate_cmd_op.result1:emit(mov EAX, EBP[-523];).store
mov EBP[-167], EAX;
#generate_cmd.trace
# IR: OP EQUAL var_227__c2 tmp_272 tmp_273
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-539], EAX;)
mov EBP[-539], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-539];)
mov EAX, EBP[-539];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-539];).store
mov EBP[-535], EAX;
#promote:emit(mov EAX, EBP[-167];)
mov EAX, EBP[-167];
#emit.needs_deref_3(tmp_272):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-547], EAX;)
mov EBP[-547], EAX;
#load_value.truncate1
mov EAX, EBP[-547];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-551], EAX;)
mov EBP[-551], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-551];)
mov EAX, EBP[-551];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-551];).store
mov EBP[-543], EAX;
#promote:emit(mov EAX, EBP[-535];)
mov EAX, EBP[-535];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-543];)
cmp EAX, EBP[-543];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-543];).store
mov EBP[-535], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-535];)
mov EAX, EBP[-535];
#generate_cmd_op.result1:emit(mov EAX, EBP[-535];).store
mov EBP[-171], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-559], EAX;)
mov EBP[-559], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-559];)
mov EAX, EBP[-559];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-559];).store
mov EBP[-555], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-555], CTRL;)
mov EBP[-555], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-555];)
mov EAX, EBP[-555];
#generate_cmd_op.result1:emit(mov EAX, EBP[-555];).store
mov EBP[-171], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-571], EAX;)
mov EBP[-571], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-571];)
mov EAX, EBP[-571];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-571];).store
mov EBP[-567], EAX;
#promote:emit(mov EAX, EBP[-567];)
mov EAX, EBP[-567];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-567], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-567];)
mov EAX, EBP[-567];
#generate_cmd_op.result1:emit(mov EAX, EBP[-567];).store
mov EBP[-171], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-579], EAX;)
mov EBP[-579], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-579];)
mov EAX, EBP[-579];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-579];).store
mov EBP[-575], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-575];)
bnot EBP[-575];
#generate_cmd_op.result1:emit(mov EAX, EBP[-575];)
mov EAX, EBP[-575];
#generate_cmd_op.result1:emit(mov EAX, EBP[-575];).store
mov EBP[-171], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-587], EAX;)
mov EBP[-587], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-587];)
mov EAX, EBP[-587];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-587];).store
mov EBP[-583], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-583];)
bnot EBP[-583];
#generate_cmd_op.result1:emit(mov EAX, EBP[-583];)
mov EAX, EBP[-583];
#generate_cmd_op.result1:emit(mov EAX, EBP[-583];).store
mov EBP[-171], EAX;
#generate_code_block.lbl_to
:lbl_to_269:
#generate_code_block.exit
# End code block cb_267
#load_value.truncate1
mov EAX, EBP[-171];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-591], EAX;)
mov EBP[-591], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-591], EAX;)
cmp EBP[-591], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_752__if_else;)
jz lbl_752__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_274
#generate_code_block.lbl_from
:lbl_from_275:
#generate_cmd.trace
# IR: OP INDEX var_206__args var_210__argI tmp_277
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];)
mov EAX, EBP[9];
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];).store
mov EBP[-595], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];).store
mov EBP[-599], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 4;)
mul EAX, 4;
#generate_cmd_op.index_step:emit(mul EAX, 4;).store
mov EBP[-599], EAX;
#promote:emit(mov EAX, EBP[-595];)
mov EAX, EBP[-595];
#generate_cmd_op.op_str:emit(add EAX, EBP[-599];)
add EAX, EBP[-599];
#generate_cmd_op.op_str:emit(add EAX, EBP[-599];).store
mov EBP[-595], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-595];)
mov EAX, EBP[-595];
#generate_cmd_op.result1:emit(mov EAX, EBP[-595];).store
mov EBP[-175], EAX;
#generate_cmd.trace
# IR: MOV var_214__arg tmp_277
#promote:emit(mov EAX, EBP[-175];)
mov EAX, EBP[-175];
#emit.needs_deref_3(tmp_277):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-607], EAX;)
mov EBP[-607], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-607];)
mov EAX, EBP[-607];
#generate_cmd_mov:emit(mov EAX, EBP[-607];).store
mov EBP[-27], EAX;
#generate_cmd.trace
# IR: OP ADD var_210__argI imm_278 tmp_279
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];).store
mov EBP[-611], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 4;)
mov EAX, 4;
#generate_cmd_op.find_b:emit(mov EAX, 4;).store
mov EBP[-615], EAX;
#promote:emit(mov EAX, EBP[-611];)
mov EAX, EBP[-611];
#generate_cmd_op.op_str:emit(add EAX, EBP[-615];)
add EAX, EBP[-615];
#generate_cmd_op.op_str:emit(add EAX, EBP[-615];).store
mov EBP[-611], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-611];)
mov EAX, EBP[-611];
#generate_cmd_op.result1:emit(mov EAX, EBP[-611];).store
mov EBP[-183], EAX;
#generate_cmd.trace
# IR: MOV var_210__argI tmp_279
#generate_cmd_mov:emit(mov EAX, EBP[-183];)
mov EAX, EBP[-183];
#generate_cmd_mov:emit(mov EAX, EBP[-183];).store
mov EBP[-11], EAX;
#generate_cmd.trace
# IR: CALL func_18__prints [ var_214__arg ] tmp_280
#generate_cmd_call.args:emit(push EBP[-27];)
push EBP[-27];
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-187], eax;)
mov EBP[-187], eax;
#generate_code_block.lbl_to
:lbl_to_276:
#generate_code_block.exit
# End code block cb_274
#generate_cmd_if.end_then:emit(jmp lbl_753__if_end;)
jmp lbl_753__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_752__if_else:)
:lbl_752__if_else:
#generate_cmd_if.end_if:emit(:lbl_753__if_end:)
:lbl_753__if_end:
#generate_cmd.trace
# IR: IF cb_281 tmp_287 cb_288
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_281
#generate_code_block.lbl_from
:lbl_from_282:
#generate_cmd.trace
# IR: OP INDEX imm_284 imm_285 tmp_286
#generate_cmd_op.arg1:emit(mov EAX, imm_284;)
mov EAX, imm_284;
#generate_cmd_op.arg1:emit(mov EAX, imm_284;).store
mov EBP[-623], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-627], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-627], EAX;
#promote:emit(mov EAX, EBP[-623];)
mov EAX, EBP[-623];
#generate_cmd_op.op_str:emit(add EAX, EBP[-627];)
add EAX, EBP[-627];
#generate_cmd_op.op_str:emit(add EAX, EBP[-627];).store
mov EBP[-623], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-623];)
mov EAX, EBP[-623];
#generate_cmd_op.result1:emit(mov EAX, EBP[-623];).store
mov EBP[-199], EAX;
#generate_cmd.trace
# IR: OP EQUAL var_227__c2 tmp_286 tmp_287
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-639], EAX;)
mov EBP[-639], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-639];)
mov EAX, EBP[-639];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-639];).store
mov EBP[-635], EAX;
#promote:emit(mov EAX, EBP[-199];)
mov EAX, EBP[-199];
#emit.needs_deref_3(tmp_286):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-647], EAX;)
mov EBP[-647], EAX;
#load_value.truncate1
mov EAX, EBP[-647];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-651], EAX;)
mov EBP[-651], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-651];)
mov EAX, EBP[-651];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-651];).store
mov EBP[-643], EAX;
#promote:emit(mov EAX, EBP[-635];)
mov EAX, EBP[-635];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-643];)
cmp EAX, EBP[-643];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-643];).store
mov EBP[-635], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-635];)
mov EAX, EBP[-635];
#generate_cmd_op.result1:emit(mov EAX, EBP[-635];).store
mov EBP[-203], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-659], EAX;)
mov EBP[-659], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-659];)
mov EAX, EBP[-659];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-659];).store
mov EBP[-655], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-655], CTRL;)
mov EBP[-655], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-655];)
mov EAX, EBP[-655];
#generate_cmd_op.result1:emit(mov EAX, EBP[-655];).store
mov EBP[-203], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-671], EAX;)
mov EBP[-671], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-671];)
mov EAX, EBP[-671];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-671];).store
mov EBP[-667], EAX;
#promote:emit(mov EAX, EBP[-667];)
mov EAX, EBP[-667];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-667], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-667];)
mov EAX, EBP[-667];
#generate_cmd_op.result1:emit(mov EAX, EBP[-667];).store
mov EBP[-203], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-679], EAX;)
mov EBP[-679], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-679];)
mov EAX, EBP[-679];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-679];).store
mov EBP[-675], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-675];)
bnot EBP[-675];
#generate_cmd_op.result1:emit(mov EAX, EBP[-675];)
mov EAX, EBP[-675];
#generate_cmd_op.result1:emit(mov EAX, EBP[-675];).store
mov EBP[-203], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-687], EAX;)
mov EBP[-687], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-687];)
mov EAX, EBP[-687];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-687];).store
mov EBP[-683], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-683];)
bnot EBP[-683];
#generate_cmd_op.result1:emit(mov EAX, EBP[-683];)
mov EAX, EBP[-683];
#generate_cmd_op.result1:emit(mov EAX, EBP[-683];).store
mov EBP[-203], EAX;
#generate_code_block.lbl_to
:lbl_to_283:
#generate_code_block.exit
# End code block cb_281
#load_value.truncate1
mov EAX, EBP[-203];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-691], EAX;)
mov EBP[-691], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-691], EAX;)
cmp EBP[-691], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_779__if_else;)
jz lbl_779__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_288
#generate_code_block.lbl_from
:lbl_from_289:
#generate_cmd.trace
# IR: OP INDEX var_206__args var_210__argI tmp_291
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];)
mov EAX, EBP[9];
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];).store
mov EBP[-695], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];).store
mov EBP[-699], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 4;)
mul EAX, 4;
#generate_cmd_op.index_step:emit(mul EAX, 4;).store
mov EBP[-699], EAX;
#promote:emit(mov EAX, EBP[-695];)
mov EAX, EBP[-695];
#generate_cmd_op.op_str:emit(add EAX, EBP[-699];)
add EAX, EBP[-699];
#generate_cmd_op.op_str:emit(add EAX, EBP[-699];).store
mov EBP[-695], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-695];)
mov EAX, EBP[-695];
#generate_cmd_op.result1:emit(mov EAX, EBP[-695];).store
mov EBP[-207], EAX;
#generate_cmd.trace
# IR: MOV var_214__arg tmp_291
#promote:emit(mov EAX, EBP[-207];)
mov EAX, EBP[-207];
#emit.needs_deref_3(tmp_291):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-707], EAX;)
mov EBP[-707], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-707];)
mov EAX, EBP[-707];
#generate_cmd_mov:emit(mov EAX, EBP[-707];).store
mov EBP[-27], EAX;
#generate_cmd.trace
# IR: OP ADD var_210__argI imm_292 tmp_293
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];).store
mov EBP[-711], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 4;)
mov EAX, 4;
#generate_cmd_op.find_b:emit(mov EAX, 4;).store
mov EBP[-715], EAX;
#promote:emit(mov EAX, EBP[-711];)
mov EAX, EBP[-711];
#generate_cmd_op.op_str:emit(add EAX, EBP[-715];)
add EAX, EBP[-715];
#generate_cmd_op.op_str:emit(add EAX, EBP[-715];).store
mov EBP[-711], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-711];)
mov EAX, EBP[-711];
#generate_cmd_op.result1:emit(mov EAX, EBP[-711];).store
mov EBP[-215], EAX;
#generate_cmd.trace
# IR: MOV var_210__argI tmp_293
#generate_cmd_mov:emit(mov EAX, EBP[-215];)
mov EAX, EBP[-215];
#generate_cmd_mov:emit(mov EAX, EBP[-215];).store
mov EBP[-11], EAX;
#generate_cmd.trace
# IR: CALL func_12__print_num [ var_214__arg ] tmp_294
#generate_cmd_call.args:emit(push EBP[-27];)
push EBP[-27];
#generate_cmd_call.call:emit(call func_12__print_num;)
call func_12__print_num;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-219], eax;)
mov EBP[-219], eax;
#generate_code_block.lbl_to
:lbl_to_290:
#generate_code_block.exit
# End code block cb_288
#generate_cmd_if.end_then:emit(jmp lbl_780__if_end;)
jmp lbl_780__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_779__if_else:)
:lbl_779__if_else:
#generate_cmd_if.end_if:emit(:lbl_780__if_end:)
:lbl_780__if_end:
#generate_cmd.trace
# IR: IF cb_295 tmp_301 cb_302
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_295
#generate_code_block.lbl_from
:lbl_from_296:
#generate_cmd.trace
# IR: OP INDEX imm_298 imm_299 tmp_300
#generate_cmd_op.arg1:emit(mov EAX, imm_298;)
mov EAX, imm_298;
#generate_cmd_op.arg1:emit(mov EAX, imm_298;).store
mov EBP[-723], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-727], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-727], EAX;
#promote:emit(mov EAX, EBP[-723];)
mov EAX, EBP[-723];
#generate_cmd_op.op_str:emit(add EAX, EBP[-727];)
add EAX, EBP[-727];
#generate_cmd_op.op_str:emit(add EAX, EBP[-727];).store
mov EBP[-723], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-723];)
mov EAX, EBP[-723];
#generate_cmd_op.result1:emit(mov EAX, EBP[-723];).store
mov EBP[-231], EAX;
#generate_cmd.trace
# IR: OP EQUAL var_227__c2 tmp_300 tmp_301
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-739], EAX;)
mov EBP[-739], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-739];)
mov EAX, EBP[-739];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-739];).store
mov EBP[-735], EAX;
#promote:emit(mov EAX, EBP[-231];)
mov EAX, EBP[-231];
#emit.needs_deref_3(tmp_300):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-747], EAX;)
mov EBP[-747], EAX;
#load_value.truncate1
mov EAX, EBP[-747];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-751], EAX;)
mov EBP[-751], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-751];)
mov EAX, EBP[-751];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-751];).store
mov EBP[-743], EAX;
#promote:emit(mov EAX, EBP[-735];)
mov EAX, EBP[-735];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-743];)
cmp EAX, EBP[-743];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-743];).store
mov EBP[-735], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-735];)
mov EAX, EBP[-735];
#generate_cmd_op.result1:emit(mov EAX, EBP[-735];).store
mov EBP[-235], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-759], EAX;)
mov EBP[-759], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-759];)
mov EAX, EBP[-759];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-759];).store
mov EBP[-755], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-755], CTRL;)
mov EBP[-755], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-755];)
mov EAX, EBP[-755];
#generate_cmd_op.result1:emit(mov EAX, EBP[-755];).store
mov EBP[-235], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-771], EAX;)
mov EBP[-771], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-771];)
mov EAX, EBP[-771];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-771];).store
mov EBP[-767], EAX;
#promote:emit(mov EAX, EBP[-767];)
mov EAX, EBP[-767];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-767], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-767];)
mov EAX, EBP[-767];
#generate_cmd_op.result1:emit(mov EAX, EBP[-767];).store
mov EBP[-235], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-779], EAX;)
mov EBP[-779], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-779];)
mov EAX, EBP[-779];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-779];).store
mov EBP[-775], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-775];)
bnot EBP[-775];
#generate_cmd_op.result1:emit(mov EAX, EBP[-775];)
mov EAX, EBP[-775];
#generate_cmd_op.result1:emit(mov EAX, EBP[-775];).store
mov EBP[-235], EAX;
#load_value.truncate1
mov EAX, EBP[-47];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-787], EAX;)
mov EBP[-787], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-787];)
mov EAX, EBP[-787];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-787];).store
mov EBP[-783], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-783];)
bnot EBP[-783];
#generate_cmd_op.result1:emit(mov EAX, EBP[-783];)
mov EAX, EBP[-783];
#generate_cmd_op.result1:emit(mov EAX, EBP[-783];).store
mov EBP[-235], EAX;
#generate_code_block.lbl_to
:lbl_to_297:
#generate_code_block.exit
# End code block cb_295
#load_value.truncate1
mov EAX, EBP[-235];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-791], EAX;)
mov EBP[-791], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-791], EAX;)
cmp EBP[-791], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_806__if_else;)
jz lbl_806__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_302
#generate_code_block.lbl_from
:lbl_from_303:
#generate_cmd.trace
# IR: CALL func_19__newline [ ] tmp_305
#generate_cmd_call.call:emit(call func_19__newline;)
call func_19__newline;
#generate_cmd_call.stack:emit(add ESP, 0;)
add ESP, 0;
#generate_cmd_call.result:emit(mov EBP[-239], eax;)
mov EBP[-239], eax;
#generate_code_block.lbl_to
:lbl_to_304:
#generate_code_block.exit
# End code block cb_302
#generate_cmd_if.end_then:emit(jmp lbl_807__if_end;)
jmp lbl_807__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_806__if_else:)
:lbl_806__if_else:
#generate_cmd_if.end_if:emit(:lbl_807__if_end:)
:lbl_807__if_end:
#generate_code_block.lbl_to
:lbl_to_265:
#generate_code_block.exit
# End code block cb_263
#generate_cmd_if.end_then:emit(jmp lbl_749__if_end;)
jmp lbl_749__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_748__if_else:)
:lbl_748__if_else:
#generate_cmd.trace
# IR: ELSE cb_306
#generate_cmd_else.cb_block
#generate_code_block.intro
# Begin code block cb_306
#generate_code_block.lbl_from
:lbl_from_307:
#generate_cmd.trace
# IR: CALL func_17__printc [ var_212__c ] tmp_309
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-795], EAX;)
mov EBP[-795], EAX;
#generate_cmd_call.args:emit(push EBP[-795];)
push EBP[-795];
#generate_cmd_call.call:emit(call func_17__printc;)
call func_17__printc;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-243], eax;)
mov EBP[-243], eax;
#generate_code_block.lbl_to
:lbl_to_308:
#generate_code_block.exit
# End code block cb_306
#generate_cmd_else.lbl_end:emit(:lbl_749__if_end:)
:lbl_749__if_end:
#generate_code_block.lbl_to
:lbl_to_236:
#generate_code_block.exit
# End code block cb_234
#generate_cmd_if.end_then:emit(jmp lbl_696__if_end;)
jmp lbl_696__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_695__if_else:)
:lbl_695__if_else:
#generate_cmd.trace
# IR: ELSE cb_310
#generate_cmd_else.cb_block
#generate_code_block.intro
# Begin code block cb_310
#generate_code_block.lbl_from
:lbl_from_311:
#generate_cmd.trace
# IR: CALL func_17__printc [ var_212__c ] tmp_313
#load_value.truncate1
mov EAX, EBP[-19];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-799], EAX;)
mov EBP[-799], EAX;
#generate_cmd_call.args:emit(push EBP[-799];)
push EBP[-799];
#generate_cmd_call.call:emit(call func_17__printc;)
call func_17__printc;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-247], eax;)
mov EBP[-247], eax;
#generate_code_block.lbl_to
:lbl_to_312:
#generate_code_block.exit
# End code block cb_310
#generate_cmd_else.lbl_end:emit(:lbl_696__if_end:)
:lbl_696__if_end:
#generate_cmd.trace
# IR: OP INDEX var_207__fmt var_208__I tmp_314
#generate_cmd_op.arg1:emit(mov EAX, EBP[13];)
mov EAX, EBP[13];
#generate_cmd_op.arg1:emit(mov EAX, EBP[13];).store
mov EBP[-803], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-3];).store
mov EBP[-807], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-807], EAX;
#promote:emit(mov EAX, EBP[-803];)
mov EAX, EBP[-803];
#generate_cmd_op.op_str:emit(add EAX, EBP[-807];)
add EAX, EBP[-807];
#generate_cmd_op.op_str:emit(add EAX, EBP[-807];).store
mov EBP[-803], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-803];)
mov EAX, EBP[-803];
#generate_cmd_op.result1:emit(mov EAX, EBP[-803];).store
mov EBP[-251], EAX;
#generate_cmd.trace
# IR: MOV var_212__c tmp_314
#promote:emit(mov EAX, EBP[-251];)
mov EAX, EBP[-251];
#emit.needs_deref_3(tmp_314):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-815], EAX;)
mov EBP[-815], EAX;
#load_value.truncate1
mov EAX, EBP[-815];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-819], EAX;)
mov EBP[-819], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-819];)
mov EAX, EBP[-819];
#generate_cmd_mov:emit(mov EAX, EBP[-819];).store
mov EBP[-19], EAX;
#generate_code_block.lbl_to
:lbl_to_223:
#generate_code_block.exit
# End code block cb_221
#generate_cmd_while.jmp_next:emit(jmp lbl_216__while_next;)
jmp lbl_216__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_217__while_end:)
:lbl_217__while_end:
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -823;)
sub ESP, -823;
#maybe_emit_func_ret(cb_202)
ret;
#generate_code_block.lbl_to
:lbl_to_204:
#generate_code_block.exit
# End code block cb_202
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_315
#generate_code_block.lbl_from
:func_11__strlen:
#generate_cmd.trace
# IR: ENTER scp_318__NULL
#generate_cmd_enter:emit(sub ESP, 59;)
sub ESP, 59;
#generate_cmd.trace
# IR: MOV var_320__I imm_321
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: WHILE cb_324 tmp_327 cb_328 lbl_322__while_next lbl_323__while_end
#generate_cmd_while.lbl_next:emit(:lbl_322__while_next:)
:lbl_322__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_324
#generate_code_block.lbl_from
:lbl_from_325:
#generate_cmd.trace
# IR: OP INDEX var_319__str var_320__I tmp_327
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];)
mov EAX, EBP[9];
#generate_cmd_op.arg1:emit(mov EAX, EBP[9];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-31], EAX;)
mov EBP[-31], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-31];)
mov EAX, EBP[-31];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-31];).store
mov EBP[-27], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-27], EAX;
#promote:emit(mov EAX, EBP[-23];)
mov EAX, EBP[-23];
#generate_cmd_op.op_str:emit(add EAX, EBP[-27];)
add EAX, EBP[-27];
#generate_cmd_op.op_str:emit(add EAX, EBP[-27];).store
mov EBP[-23], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-23];)
mov EAX, EBP[-23];
#generate_cmd_op.result1:emit(mov EAX, EBP[-23];).store
mov EBP[-11], EAX;
#generate_code_block.lbl_to
:lbl_to_326:
#generate_code_block.exit
# End code block cb_324
#promote:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#emit.needs_deref_3(tmp_327):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-39], EAX;)
mov EBP[-39], EAX;
#load_value.truncate1
mov EAX, EBP[-39];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-43], EAX;)
mov EBP[-43], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp EBP[-43], EAX;)
cmp EBP[-43], EAX;
#generate_cmd_while.jz_end:emit(jz lbl_323__while_end;)
jz lbl_323__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_328
#generate_code_block.lbl_from
:lbl_from_329:
#generate_cmd.trace
# IR: OP INC var_320__I none tmp_331
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-47], EAX;)
mov EBP[-47], EAX;
#generate_cmd_op.result2:emit(mov EAX, EBP[-47];)
mov EAX, EBP[-47];
#generate_cmd_op.result2:emit(mov EAX, EBP[-47];).store
mov EBP[-15], EAX;
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-51], EAX;)
mov EBP[-51], EAX;
#generate_cmd_op.op_str:emit(inc EBP[-51];)
inc EBP[-51];
#generate_code_block.lbl_to
:lbl_to_330:
#generate_code_block.exit
# End code block cb_328
#generate_cmd_while.jmp_next:emit(jmp lbl_322__while_next;)
jmp lbl_322__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_323__while_end:)
:lbl_323__while_end:
#generate_cmd.trace
# IR: RETURN var_320__I
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-55], EAX;)
mov EBP[-55], EAX;
#generate_cmd_return.arg:emit(mov EAX, EBP[-55];)
mov EAX, EBP[-55];
#generate_cmd_return.leave:emit(sub ESP, -59;)
sub ESP, -59;
#generate_cmd_return.ret:emit(ret;)
ret;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -59;)
sub ESP, -59;
#maybe_emit_func_ret(cb_315)
ret;
#generate_code_block.lbl_to
:lbl_to_317:
#generate_code_block.exit
# End code block cb_315
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_135
#generate_code_block.lbl_from
:func_6__putch:
#generate_cmd.trace
# IR: ENTER scp_138__NULL
#generate_cmd_enter:emit(sub ESP, 59;)
sub ESP, 59;
#generate_cmd.trace
# IR: CALL func_8__scr_push_byte [ var_142__c ] tmp_143
#load_value.truncate1
mov EAX, EBP[21];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-43], EAX;)
mov EBP[-43], EAX;
#generate_cmd_call.args:emit(push EBP[-43];)
push EBP[-43];
#generate_cmd_call.call:emit(call func_8__scr_push_byte;)
call func_8__scr_push_byte;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-3], eax;)
mov EBP[-3], eax;
#generate_cmd.trace
# IR: CALL func_8__scr_push_byte [ var_141__r ] tmp_144
#load_value.truncate1
mov EAX, EBP[17];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-47], EAX;)
mov EBP[-47], EAX;
#generate_cmd_call.args:emit(push EBP[-47];)
push EBP[-47];
#generate_cmd_call.call:emit(call func_8__scr_push_byte;)
call func_8__scr_push_byte;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-7], eax;)
mov EBP[-7], eax;
#generate_cmd.trace
# IR: CALL func_8__scr_push_byte [ var_140__g ] tmp_145
#load_value.truncate1
mov EAX, EBP[13];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-51], EAX;)
mov EBP[-51], EAX;
#generate_cmd_call.args:emit(push EBP[-51];)
push EBP[-51];
#generate_cmd_call.call:emit(call func_8__scr_push_byte;)
call func_8__scr_push_byte;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-11], eax;)
mov EBP[-11], eax;
#generate_cmd.trace
# IR: CALL func_8__scr_push_byte [ var_139__b ] tmp_146
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-55], EAX;)
mov EBP[-55], EAX;
#generate_cmd_call.args:emit(push EBP[-55];)
push EBP[-55];
#generate_cmd_call.call:emit(call func_8__scr_push_byte;)
call func_8__scr_push_byte;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-15], eax;)
mov EBP[-15], eax;
#generate_cmd.trace
# IR: CALL func_8__scr_push_byte [ imm_147 ] tmp_148
#generate_cmd_call.args:emit(push 0;)
push 0;
#generate_cmd_call.call:emit(call func_8__scr_push_byte;)
call func_8__scr_push_byte;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-23], eax;)
mov EBP[-23], eax;
#generate_cmd.trace
# IR: CALL func_8__scr_push_byte [ imm_149 ] tmp_150
#generate_cmd_call.args:emit(push 0;)
push 0;
#generate_cmd_call.call:emit(call func_8__scr_push_byte;)
call func_8__scr_push_byte;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-31], eax;)
mov EBP[-31], eax;
#generate_cmd.trace
# IR: CALL func_8__scr_push_byte [ imm_151 ] tmp_152
#generate_cmd_call.args:emit(push 0;)
push 0;
#generate_cmd_call.call:emit(call func_8__scr_push_byte;)
call func_8__scr_push_byte;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-39], eax;)
mov EBP[-39], eax;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -59;)
sub ESP, -59;
#maybe_emit_func_ret(cb_135)
ret;
#generate_code_block.lbl_to
:lbl_to_137:
#generate_code_block.exit
# End code block cb_135
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_397
#generate_code_block.lbl_from
:func_15__print_digit:
#generate_cmd.trace
# IR: ENTER scp_400__NULL
#generate_cmd_enter:emit(sub ESP, 867;)
sub ESP, 867;
#generate_cmd.trace
# IR: IF cb_402 tmp_406 cb_407
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_402
#generate_code_block.lbl_from
:lbl_from_403:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_405 tmp_406
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-203], EAX;)
mov EBP[-203], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-203];)
mov EAX, EBP[-203];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-203];).store
mov EBP[-199], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-207], EAX;
#promote:emit(mov EAX, EBP[-199];)
mov EAX, EBP[-199];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-207];)
cmp EAX, EBP[-207];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-207];).store
mov EBP[-199], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-199];)
mov EAX, EBP[-199];
#generate_cmd_op.result1:emit(mov EAX, EBP[-199];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-215], EAX;)
mov EBP[-215], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-215];)
mov EAX, EBP[-215];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-215];).store
mov EBP[-211], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-211], CTRL;)
mov EBP[-211], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-211];)
mov EAX, EBP[-211];
#generate_cmd_op.result1:emit(mov EAX, EBP[-211];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-227], EAX;)
mov EBP[-227], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-227];)
mov EAX, EBP[-227];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-227];).store
mov EBP[-223], EAX;
#promote:emit(mov EAX, EBP[-223];)
mov EAX, EBP[-223];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-223], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-223];)
mov EAX, EBP[-223];
#generate_cmd_op.result1:emit(mov EAX, EBP[-223];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-235], EAX;)
mov EBP[-235], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-235];)
mov EAX, EBP[-235];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-235];).store
mov EBP[-231], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-231];)
bnot EBP[-231];
#generate_cmd_op.result1:emit(mov EAX, EBP[-231];)
mov EAX, EBP[-231];
#generate_cmd_op.result1:emit(mov EAX, EBP[-231];).store
mov EBP[-7], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-243], EAX;)
mov EBP[-243], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-243];)
mov EAX, EBP[-243];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-243];).store
mov EBP[-239], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-239];)
bnot EBP[-239];
#generate_cmd_op.result1:emit(mov EAX, EBP[-239];)
mov EAX, EBP[-239];
#generate_cmd_op.result1:emit(mov EAX, EBP[-239];).store
mov EBP[-7], EAX;
#generate_code_block.lbl_to
:lbl_to_404:
#generate_code_block.exit
# End code block cb_402
#load_value.truncate1
mov EAX, EBP[-7];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-247], EAX;)
mov EBP[-247], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-247], EAX;)
cmp EBP[-247], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_848__if_else;)
jz lbl_848__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_407
#generate_code_block.lbl_from
:lbl_from_408:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_410 ] tmp_411
#generate_cmd_call.args:emit(push imm_410;)
push imm_410;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-15], eax;)
mov EBP[-15], eax;
#generate_code_block.lbl_to
:lbl_to_409:
#generate_code_block.exit
# End code block cb_407
#generate_cmd_if.end_then:emit(jmp lbl_849__if_end;)
jmp lbl_849__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_848__if_else:)
:lbl_848__if_else:
#generate_cmd_if.end_if:emit(:lbl_849__if_end:)
:lbl_849__if_end:
#generate_cmd.trace
# IR: IF cb_412 tmp_416 cb_417
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_412
#generate_code_block.lbl_from
:lbl_from_413:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_415 tmp_416
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-259], EAX;)
mov EBP[-259], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-259];)
mov EAX, EBP[-259];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-259];).store
mov EBP[-255], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 1;)
mov EAX, 1;
#generate_cmd_op.find_b:emit(mov EAX, 1;).store
mov EBP[-263], EAX;
#promote:emit(mov EAX, EBP[-255];)
mov EAX, EBP[-255];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-263];)
cmp EAX, EBP[-263];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-263];).store
mov EBP[-255], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-255];)
mov EAX, EBP[-255];
#generate_cmd_op.result1:emit(mov EAX, EBP[-255];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-271], EAX;)
mov EBP[-271], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-271];)
mov EAX, EBP[-271];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-271];).store
mov EBP[-267], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-267], CTRL;)
mov EBP[-267], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-267];)
mov EAX, EBP[-267];
#generate_cmd_op.result1:emit(mov EAX, EBP[-267];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-283], EAX;)
mov EBP[-283], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-283];)
mov EAX, EBP[-283];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-283];).store
mov EBP[-279], EAX;
#promote:emit(mov EAX, EBP[-279];)
mov EAX, EBP[-279];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-279], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-279];)
mov EAX, EBP[-279];
#generate_cmd_op.result1:emit(mov EAX, EBP[-279];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-291], EAX;)
mov EBP[-291], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-291];)
mov EAX, EBP[-291];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-291];).store
mov EBP[-287], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-287];)
bnot EBP[-287];
#generate_cmd_op.result1:emit(mov EAX, EBP[-287];)
mov EAX, EBP[-287];
#generate_cmd_op.result1:emit(mov EAX, EBP[-287];).store
mov EBP[-23], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-299], EAX;)
mov EBP[-299], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-299];)
mov EAX, EBP[-299];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-299];).store
mov EBP[-295], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-295];)
bnot EBP[-295];
#generate_cmd_op.result1:emit(mov EAX, EBP[-295];)
mov EAX, EBP[-295];
#generate_cmd_op.result1:emit(mov EAX, EBP[-295];).store
mov EBP[-23], EAX;
#generate_code_block.lbl_to
:lbl_to_414:
#generate_code_block.exit
# End code block cb_412
#load_value.truncate1
mov EAX, EBP[-23];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-303], EAX;)
mov EBP[-303], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-303], EAX;)
cmp EBP[-303], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_864__if_else;)
jz lbl_864__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_417
#generate_code_block.lbl_from
:lbl_from_418:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_420 ] tmp_421
#generate_cmd_call.args:emit(push imm_420;)
push imm_420;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-31], eax;)
mov EBP[-31], eax;
#generate_code_block.lbl_to
:lbl_to_419:
#generate_code_block.exit
# End code block cb_417
#generate_cmd_if.end_then:emit(jmp lbl_865__if_end;)
jmp lbl_865__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_864__if_else:)
:lbl_864__if_else:
#generate_cmd_if.end_if:emit(:lbl_865__if_end:)
:lbl_865__if_end:
#generate_cmd.trace
# IR: IF cb_422 tmp_426 cb_427
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_422
#generate_code_block.lbl_from
:lbl_from_423:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_425 tmp_426
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-315], EAX;)
mov EBP[-315], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-315];)
mov EAX, EBP[-315];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-315];).store
mov EBP[-311], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 2;)
mov EAX, 2;
#generate_cmd_op.find_b:emit(mov EAX, 2;).store
mov EBP[-319], EAX;
#promote:emit(mov EAX, EBP[-311];)
mov EAX, EBP[-311];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-319];)
cmp EAX, EBP[-319];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-319];).store
mov EBP[-311], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-311];)
mov EAX, EBP[-311];
#generate_cmd_op.result1:emit(mov EAX, EBP[-311];).store
mov EBP[-39], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-327], EAX;)
mov EBP[-327], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-327];)
mov EAX, EBP[-327];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-327];).store
mov EBP[-323], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-323], CTRL;)
mov EBP[-323], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-323];)
mov EAX, EBP[-323];
#generate_cmd_op.result1:emit(mov EAX, EBP[-323];).store
mov EBP[-39], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-339], EAX;)
mov EBP[-339], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-339];)
mov EAX, EBP[-339];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-339];).store
mov EBP[-335], EAX;
#promote:emit(mov EAX, EBP[-335];)
mov EAX, EBP[-335];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-335], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-335];)
mov EAX, EBP[-335];
#generate_cmd_op.result1:emit(mov EAX, EBP[-335];).store
mov EBP[-39], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-347], EAX;)
mov EBP[-347], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-347];)
mov EAX, EBP[-347];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-347];).store
mov EBP[-343], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-343];)
bnot EBP[-343];
#generate_cmd_op.result1:emit(mov EAX, EBP[-343];)
mov EAX, EBP[-343];
#generate_cmd_op.result1:emit(mov EAX, EBP[-343];).store
mov EBP[-39], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-355], EAX;)
mov EBP[-355], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-355];)
mov EAX, EBP[-355];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-355];).store
mov EBP[-351], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-351];)
bnot EBP[-351];
#generate_cmd_op.result1:emit(mov EAX, EBP[-351];)
mov EAX, EBP[-351];
#generate_cmd_op.result1:emit(mov EAX, EBP[-351];).store
mov EBP[-39], EAX;
#generate_code_block.lbl_to
:lbl_to_424:
#generate_code_block.exit
# End code block cb_422
#load_value.truncate1
mov EAX, EBP[-39];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-359], EAX;)
mov EBP[-359], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-359], EAX;)
cmp EBP[-359], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_880__if_else;)
jz lbl_880__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_427
#generate_code_block.lbl_from
:lbl_from_428:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_430 ] tmp_431
#generate_cmd_call.args:emit(push imm_430;)
push imm_430;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-47], eax;)
mov EBP[-47], eax;
#generate_code_block.lbl_to
:lbl_to_429:
#generate_code_block.exit
# End code block cb_427
#generate_cmd_if.end_then:emit(jmp lbl_881__if_end;)
jmp lbl_881__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_880__if_else:)
:lbl_880__if_else:
#generate_cmd_if.end_if:emit(:lbl_881__if_end:)
:lbl_881__if_end:
#generate_cmd.trace
# IR: IF cb_432 tmp_436 cb_437
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_432
#generate_code_block.lbl_from
:lbl_from_433:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_435 tmp_436
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-371], EAX;)
mov EBP[-371], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-371];)
mov EAX, EBP[-371];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-371];).store
mov EBP[-367], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 3;)
mov EAX, 3;
#generate_cmd_op.find_b:emit(mov EAX, 3;).store
mov EBP[-375], EAX;
#promote:emit(mov EAX, EBP[-367];)
mov EAX, EBP[-367];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-375];)
cmp EAX, EBP[-375];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-375];).store
mov EBP[-367], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-367];)
mov EAX, EBP[-367];
#generate_cmd_op.result1:emit(mov EAX, EBP[-367];).store
mov EBP[-55], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-383], EAX;)
mov EBP[-383], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-383];)
mov EAX, EBP[-383];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-383];).store
mov EBP[-379], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-379], CTRL;)
mov EBP[-379], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-379];)
mov EAX, EBP[-379];
#generate_cmd_op.result1:emit(mov EAX, EBP[-379];).store
mov EBP[-55], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-395], EAX;)
mov EBP[-395], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-395];)
mov EAX, EBP[-395];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-395];).store
mov EBP[-391], EAX;
#promote:emit(mov EAX, EBP[-391];)
mov EAX, EBP[-391];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-391], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-391];)
mov EAX, EBP[-391];
#generate_cmd_op.result1:emit(mov EAX, EBP[-391];).store
mov EBP[-55], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-403], EAX;)
mov EBP[-403], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-403];)
mov EAX, EBP[-403];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-403];).store
mov EBP[-399], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-399];)
bnot EBP[-399];
#generate_cmd_op.result1:emit(mov EAX, EBP[-399];)
mov EAX, EBP[-399];
#generate_cmd_op.result1:emit(mov EAX, EBP[-399];).store
mov EBP[-55], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-411], EAX;)
mov EBP[-411], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-411];)
mov EAX, EBP[-411];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-411];).store
mov EBP[-407], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-407];)
bnot EBP[-407];
#generate_cmd_op.result1:emit(mov EAX, EBP[-407];)
mov EAX, EBP[-407];
#generate_cmd_op.result1:emit(mov EAX, EBP[-407];).store
mov EBP[-55], EAX;
#generate_code_block.lbl_to
:lbl_to_434:
#generate_code_block.exit
# End code block cb_432
#load_value.truncate1
mov EAX, EBP[-55];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-415], EAX;)
mov EBP[-415], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-415], EAX;)
cmp EBP[-415], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_896__if_else;)
jz lbl_896__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_437
#generate_code_block.lbl_from
:lbl_from_438:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_440 ] tmp_441
#generate_cmd_call.args:emit(push imm_440;)
push imm_440;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-63], eax;)
mov EBP[-63], eax;
#generate_code_block.lbl_to
:lbl_to_439:
#generate_code_block.exit
# End code block cb_437
#generate_cmd_if.end_then:emit(jmp lbl_897__if_end;)
jmp lbl_897__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_896__if_else:)
:lbl_896__if_else:
#generate_cmd_if.end_if:emit(:lbl_897__if_end:)
:lbl_897__if_end:
#generate_cmd.trace
# IR: IF cb_442 tmp_446 cb_447
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_442
#generate_code_block.lbl_from
:lbl_from_443:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_445 tmp_446
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-427], EAX;)
mov EBP[-427], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-427];)
mov EAX, EBP[-427];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-427];).store
mov EBP[-423], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 4;)
mov EAX, 4;
#generate_cmd_op.find_b:emit(mov EAX, 4;).store
mov EBP[-431], EAX;
#promote:emit(mov EAX, EBP[-423];)
mov EAX, EBP[-423];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-431];)
cmp EAX, EBP[-431];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-431];).store
mov EBP[-423], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-423];)
mov EAX, EBP[-423];
#generate_cmd_op.result1:emit(mov EAX, EBP[-423];).store
mov EBP[-71], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-439], EAX;)
mov EBP[-439], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-439];)
mov EAX, EBP[-439];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-439];).store
mov EBP[-435], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-435], CTRL;)
mov EBP[-435], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-435];)
mov EAX, EBP[-435];
#generate_cmd_op.result1:emit(mov EAX, EBP[-435];).store
mov EBP[-71], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-451], EAX;)
mov EBP[-451], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-451];)
mov EAX, EBP[-451];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-451];).store
mov EBP[-447], EAX;
#promote:emit(mov EAX, EBP[-447];)
mov EAX, EBP[-447];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-447], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-447];)
mov EAX, EBP[-447];
#generate_cmd_op.result1:emit(mov EAX, EBP[-447];).store
mov EBP[-71], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-459], EAX;)
mov EBP[-459], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-459];)
mov EAX, EBP[-459];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-459];).store
mov EBP[-455], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-455];)
bnot EBP[-455];
#generate_cmd_op.result1:emit(mov EAX, EBP[-455];)
mov EAX, EBP[-455];
#generate_cmd_op.result1:emit(mov EAX, EBP[-455];).store
mov EBP[-71], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-467], EAX;)
mov EBP[-467], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-467];)
mov EAX, EBP[-467];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-467];).store
mov EBP[-463], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-463];)
bnot EBP[-463];
#generate_cmd_op.result1:emit(mov EAX, EBP[-463];)
mov EAX, EBP[-463];
#generate_cmd_op.result1:emit(mov EAX, EBP[-463];).store
mov EBP[-71], EAX;
#generate_code_block.lbl_to
:lbl_to_444:
#generate_code_block.exit
# End code block cb_442
#load_value.truncate1
mov EAX, EBP[-71];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-471], EAX;)
mov EBP[-471], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-471], EAX;)
cmp EBP[-471], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_912__if_else;)
jz lbl_912__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_447
#generate_code_block.lbl_from
:lbl_from_448:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_450 ] tmp_451
#generate_cmd_call.args:emit(push imm_450;)
push imm_450;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-79], eax;)
mov EBP[-79], eax;
#generate_code_block.lbl_to
:lbl_to_449:
#generate_code_block.exit
# End code block cb_447
#generate_cmd_if.end_then:emit(jmp lbl_913__if_end;)
jmp lbl_913__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_912__if_else:)
:lbl_912__if_else:
#generate_cmd_if.end_if:emit(:lbl_913__if_end:)
:lbl_913__if_end:
#generate_cmd.trace
# IR: IF cb_452 tmp_456 cb_457
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_452
#generate_code_block.lbl_from
:lbl_from_453:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_455 tmp_456
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-483], EAX;)
mov EBP[-483], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-483];)
mov EAX, EBP[-483];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-483];).store
mov EBP[-479], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 5;)
mov EAX, 5;
#generate_cmd_op.find_b:emit(mov EAX, 5;).store
mov EBP[-487], EAX;
#promote:emit(mov EAX, EBP[-479];)
mov EAX, EBP[-479];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-487];)
cmp EAX, EBP[-487];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-487];).store
mov EBP[-479], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-479];)
mov EAX, EBP[-479];
#generate_cmd_op.result1:emit(mov EAX, EBP[-479];).store
mov EBP[-87], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-495], EAX;)
mov EBP[-495], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-495];)
mov EAX, EBP[-495];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-495];).store
mov EBP[-491], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-491], CTRL;)
mov EBP[-491], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-491];)
mov EAX, EBP[-491];
#generate_cmd_op.result1:emit(mov EAX, EBP[-491];).store
mov EBP[-87], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-507], EAX;)
mov EBP[-507], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-507];)
mov EAX, EBP[-507];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-507];).store
mov EBP[-503], EAX;
#promote:emit(mov EAX, EBP[-503];)
mov EAX, EBP[-503];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-503], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-503];)
mov EAX, EBP[-503];
#generate_cmd_op.result1:emit(mov EAX, EBP[-503];).store
mov EBP[-87], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-515], EAX;)
mov EBP[-515], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-515];)
mov EAX, EBP[-515];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-515];).store
mov EBP[-511], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-511];)
bnot EBP[-511];
#generate_cmd_op.result1:emit(mov EAX, EBP[-511];)
mov EAX, EBP[-511];
#generate_cmd_op.result1:emit(mov EAX, EBP[-511];).store
mov EBP[-87], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-523], EAX;)
mov EBP[-523], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-523];)
mov EAX, EBP[-523];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-523];).store
mov EBP[-519], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-519];)
bnot EBP[-519];
#generate_cmd_op.result1:emit(mov EAX, EBP[-519];)
mov EAX, EBP[-519];
#generate_cmd_op.result1:emit(mov EAX, EBP[-519];).store
mov EBP[-87], EAX;
#generate_code_block.lbl_to
:lbl_to_454:
#generate_code_block.exit
# End code block cb_452
#load_value.truncate1
mov EAX, EBP[-87];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-527], EAX;)
mov EBP[-527], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-527], EAX;)
cmp EBP[-527], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_928__if_else;)
jz lbl_928__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_457
#generate_code_block.lbl_from
:lbl_from_458:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_460 ] tmp_461
#generate_cmd_call.args:emit(push imm_460;)
push imm_460;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-95], eax;)
mov EBP[-95], eax;
#generate_code_block.lbl_to
:lbl_to_459:
#generate_code_block.exit
# End code block cb_457
#generate_cmd_if.end_then:emit(jmp lbl_929__if_end;)
jmp lbl_929__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_928__if_else:)
:lbl_928__if_else:
#generate_cmd_if.end_if:emit(:lbl_929__if_end:)
:lbl_929__if_end:
#generate_cmd.trace
# IR: IF cb_462 tmp_466 cb_467
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_462
#generate_code_block.lbl_from
:lbl_from_463:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_465 tmp_466
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-539], EAX;)
mov EBP[-539], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-539];)
mov EAX, EBP[-539];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-539];).store
mov EBP[-535], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 6;)
mov EAX, 6;
#generate_cmd_op.find_b:emit(mov EAX, 6;).store
mov EBP[-543], EAX;
#promote:emit(mov EAX, EBP[-535];)
mov EAX, EBP[-535];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-543];)
cmp EAX, EBP[-543];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-543];).store
mov EBP[-535], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-535];)
mov EAX, EBP[-535];
#generate_cmd_op.result1:emit(mov EAX, EBP[-535];).store
mov EBP[-103], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-551], EAX;)
mov EBP[-551], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-551];)
mov EAX, EBP[-551];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-551];).store
mov EBP[-547], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-547], CTRL;)
mov EBP[-547], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-547];)
mov EAX, EBP[-547];
#generate_cmd_op.result1:emit(mov EAX, EBP[-547];).store
mov EBP[-103], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-563], EAX;)
mov EBP[-563], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-563];)
mov EAX, EBP[-563];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-563];).store
mov EBP[-559], EAX;
#promote:emit(mov EAX, EBP[-559];)
mov EAX, EBP[-559];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-559], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-559];)
mov EAX, EBP[-559];
#generate_cmd_op.result1:emit(mov EAX, EBP[-559];).store
mov EBP[-103], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-571], EAX;)
mov EBP[-571], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-571];)
mov EAX, EBP[-571];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-571];).store
mov EBP[-567], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-567];)
bnot EBP[-567];
#generate_cmd_op.result1:emit(mov EAX, EBP[-567];)
mov EAX, EBP[-567];
#generate_cmd_op.result1:emit(mov EAX, EBP[-567];).store
mov EBP[-103], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-579], EAX;)
mov EBP[-579], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-579];)
mov EAX, EBP[-579];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-579];).store
mov EBP[-575], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-575];)
bnot EBP[-575];
#generate_cmd_op.result1:emit(mov EAX, EBP[-575];)
mov EAX, EBP[-575];
#generate_cmd_op.result1:emit(mov EAX, EBP[-575];).store
mov EBP[-103], EAX;
#generate_code_block.lbl_to
:lbl_to_464:
#generate_code_block.exit
# End code block cb_462
#load_value.truncate1
mov EAX, EBP[-103];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-583], EAX;)
mov EBP[-583], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-583], EAX;)
cmp EBP[-583], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_944__if_else;)
jz lbl_944__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_467
#generate_code_block.lbl_from
:lbl_from_468:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_470 ] tmp_471
#generate_cmd_call.args:emit(push imm_470;)
push imm_470;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-111], eax;)
mov EBP[-111], eax;
#generate_code_block.lbl_to
:lbl_to_469:
#generate_code_block.exit
# End code block cb_467
#generate_cmd_if.end_then:emit(jmp lbl_945__if_end;)
jmp lbl_945__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_944__if_else:)
:lbl_944__if_else:
#generate_cmd_if.end_if:emit(:lbl_945__if_end:)
:lbl_945__if_end:
#generate_cmd.trace
# IR: IF cb_472 tmp_476 cb_477
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_472
#generate_code_block.lbl_from
:lbl_from_473:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_475 tmp_476
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-595], EAX;)
mov EBP[-595], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-595];)
mov EAX, EBP[-595];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-595];).store
mov EBP[-591], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 7;)
mov EAX, 7;
#generate_cmd_op.find_b:emit(mov EAX, 7;).store
mov EBP[-599], EAX;
#promote:emit(mov EAX, EBP[-591];)
mov EAX, EBP[-591];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-599];)
cmp EAX, EBP[-599];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-599];).store
mov EBP[-591], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-591];)
mov EAX, EBP[-591];
#generate_cmd_op.result1:emit(mov EAX, EBP[-591];).store
mov EBP[-119], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-607], EAX;)
mov EBP[-607], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-607];)
mov EAX, EBP[-607];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-607];).store
mov EBP[-603], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-603], CTRL;)
mov EBP[-603], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-603];)
mov EAX, EBP[-603];
#generate_cmd_op.result1:emit(mov EAX, EBP[-603];).store
mov EBP[-119], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-619], EAX;)
mov EBP[-619], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-619];)
mov EAX, EBP[-619];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-619];).store
mov EBP[-615], EAX;
#promote:emit(mov EAX, EBP[-615];)
mov EAX, EBP[-615];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-615], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-615];)
mov EAX, EBP[-615];
#generate_cmd_op.result1:emit(mov EAX, EBP[-615];).store
mov EBP[-119], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-627], EAX;)
mov EBP[-627], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-627];)
mov EAX, EBP[-627];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-627];).store
mov EBP[-623], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-623];)
bnot EBP[-623];
#generate_cmd_op.result1:emit(mov EAX, EBP[-623];)
mov EAX, EBP[-623];
#generate_cmd_op.result1:emit(mov EAX, EBP[-623];).store
mov EBP[-119], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-635], EAX;)
mov EBP[-635], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-635];)
mov EAX, EBP[-635];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-635];).store
mov EBP[-631], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-631];)
bnot EBP[-631];
#generate_cmd_op.result1:emit(mov EAX, EBP[-631];)
mov EAX, EBP[-631];
#generate_cmd_op.result1:emit(mov EAX, EBP[-631];).store
mov EBP[-119], EAX;
#generate_code_block.lbl_to
:lbl_to_474:
#generate_code_block.exit
# End code block cb_472
#load_value.truncate1
mov EAX, EBP[-119];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-639], EAX;)
mov EBP[-639], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-639], EAX;)
cmp EBP[-639], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_960__if_else;)
jz lbl_960__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_477
#generate_code_block.lbl_from
:lbl_from_478:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_480 ] tmp_481
#generate_cmd_call.args:emit(push imm_480;)
push imm_480;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-127], eax;)
mov EBP[-127], eax;
#generate_code_block.lbl_to
:lbl_to_479:
#generate_code_block.exit
# End code block cb_477
#generate_cmd_if.end_then:emit(jmp lbl_961__if_end;)
jmp lbl_961__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_960__if_else:)
:lbl_960__if_else:
#generate_cmd_if.end_if:emit(:lbl_961__if_end:)
:lbl_961__if_end:
#generate_cmd.trace
# IR: IF cb_482 tmp_486 cb_487
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_482
#generate_code_block.lbl_from
:lbl_from_483:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_485 tmp_486
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-651], EAX;)
mov EBP[-651], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-651];)
mov EAX, EBP[-651];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-651];).store
mov EBP[-647], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 8;)
mov EAX, 8;
#generate_cmd_op.find_b:emit(mov EAX, 8;).store
mov EBP[-655], EAX;
#promote:emit(mov EAX, EBP[-647];)
mov EAX, EBP[-647];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-655];)
cmp EAX, EBP[-655];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-655];).store
mov EBP[-647], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-647];)
mov EAX, EBP[-647];
#generate_cmd_op.result1:emit(mov EAX, EBP[-647];).store
mov EBP[-135], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-663], EAX;)
mov EBP[-663], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-663];)
mov EAX, EBP[-663];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-663];).store
mov EBP[-659], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-659], CTRL;)
mov EBP[-659], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-659];)
mov EAX, EBP[-659];
#generate_cmd_op.result1:emit(mov EAX, EBP[-659];).store
mov EBP[-135], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-675], EAX;)
mov EBP[-675], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-675];)
mov EAX, EBP[-675];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-675];).store
mov EBP[-671], EAX;
#promote:emit(mov EAX, EBP[-671];)
mov EAX, EBP[-671];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-671], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-671];)
mov EAX, EBP[-671];
#generate_cmd_op.result1:emit(mov EAX, EBP[-671];).store
mov EBP[-135], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-683], EAX;)
mov EBP[-683], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-683];)
mov EAX, EBP[-683];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-683];).store
mov EBP[-679], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-679];)
bnot EBP[-679];
#generate_cmd_op.result1:emit(mov EAX, EBP[-679];)
mov EAX, EBP[-679];
#generate_cmd_op.result1:emit(mov EAX, EBP[-679];).store
mov EBP[-135], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-691], EAX;)
mov EBP[-691], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-691];)
mov EAX, EBP[-691];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-691];).store
mov EBP[-687], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-687];)
bnot EBP[-687];
#generate_cmd_op.result1:emit(mov EAX, EBP[-687];)
mov EAX, EBP[-687];
#generate_cmd_op.result1:emit(mov EAX, EBP[-687];).store
mov EBP[-135], EAX;
#generate_code_block.lbl_to
:lbl_to_484:
#generate_code_block.exit
# End code block cb_482
#load_value.truncate1
mov EAX, EBP[-135];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-695], EAX;)
mov EBP[-695], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-695], EAX;)
cmp EBP[-695], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_976__if_else;)
jz lbl_976__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_487
#generate_code_block.lbl_from
:lbl_from_488:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_490 ] tmp_491
#generate_cmd_call.args:emit(push imm_490;)
push imm_490;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-143], eax;)
mov EBP[-143], eax;
#generate_code_block.lbl_to
:lbl_to_489:
#generate_code_block.exit
# End code block cb_487
#generate_cmd_if.end_then:emit(jmp lbl_977__if_end;)
jmp lbl_977__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_976__if_else:)
:lbl_976__if_else:
#generate_cmd_if.end_if:emit(:lbl_977__if_end:)
:lbl_977__if_end:
#generate_cmd.trace
# IR: IF cb_492 tmp_496 cb_497
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_492
#generate_code_block.lbl_from
:lbl_from_493:
#generate_cmd.trace
# IR: OP EQUAL var_401__digit imm_495 tmp_496
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-707], EAX;)
mov EBP[-707], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-707];)
mov EAX, EBP[-707];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-707];).store
mov EBP[-703], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 9;)
mov EAX, 9;
#generate_cmd_op.find_b:emit(mov EAX, 9;).store
mov EBP[-711], EAX;
#promote:emit(mov EAX, EBP[-703];)
mov EAX, EBP[-703];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-711];)
cmp EAX, EBP[-711];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-711];).store
mov EBP[-703], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-703];)
mov EAX, EBP[-703];
#generate_cmd_op.result1:emit(mov EAX, EBP[-703];).store
mov EBP[-151], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-719], EAX;)
mov EBP[-719], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-719];)
mov EAX, EBP[-719];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-719];).store
mov EBP[-715], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-715], CTRL;)
mov EBP[-715], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-715];)
mov EAX, EBP[-715];
#generate_cmd_op.result1:emit(mov EAX, EBP[-715];).store
mov EBP[-151], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-731], EAX;)
mov EBP[-731], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-731];)
mov EAX, EBP[-731];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-731];).store
mov EBP[-727], EAX;
#promote:emit(mov EAX, EBP[-727];)
mov EAX, EBP[-727];
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;)
band EAX, CMP_Z;
#generate_cmd_op.op_str:emit(band EAX, CMP_Z;).store
mov EBP[-727], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-727];)
mov EAX, EBP[-727];
#generate_cmd_op.result1:emit(mov EAX, EBP[-727];).store
mov EBP[-151], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-739], EAX;)
mov EBP[-739], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-739];)
mov EAX, EBP[-739];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-739];).store
mov EBP[-735], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-735];)
bnot EBP[-735];
#generate_cmd_op.result1:emit(mov EAX, EBP[-735];)
mov EAX, EBP[-735];
#generate_cmd_op.result1:emit(mov EAX, EBP[-735];).store
mov EBP[-151], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-747], EAX;)
mov EBP[-747], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-747];)
mov EAX, EBP[-747];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-747];).store
mov EBP[-743], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-743];)
bnot EBP[-743];
#generate_cmd_op.result1:emit(mov EAX, EBP[-743];)
mov EAX, EBP[-743];
#generate_cmd_op.result1:emit(mov EAX, EBP[-743];).store
mov EBP[-151], EAX;
#generate_code_block.lbl_to
:lbl_to_494:
#generate_code_block.exit
# End code block cb_492
#load_value.truncate1
mov EAX, EBP[-151];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-751], EAX;)
mov EBP[-751], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-751], EAX;)
cmp EBP[-751], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_992__if_else;)
jz lbl_992__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_497
#generate_code_block.lbl_from
:lbl_from_498:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_500 ] tmp_501
#generate_cmd_call.args:emit(push imm_500;)
push imm_500;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-159], eax;)
mov EBP[-159], eax;
#generate_code_block.lbl_to
:lbl_to_499:
#generate_code_block.exit
# End code block cb_497
#generate_cmd_if.end_then:emit(jmp lbl_993__if_end;)
jmp lbl_993__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_992__if_else:)
:lbl_992__if_else:
#generate_cmd_if.end_if:emit(:lbl_993__if_end:)
:lbl_993__if_end:
#generate_cmd.trace
# IR: IF cb_502 tmp_506 cb_507
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_502
#generate_code_block.lbl_from
:lbl_from_503:
#generate_cmd.trace
# IR: OP GREATER var_401__digit imm_505 tmp_506
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-763], EAX;)
mov EBP[-763], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-763];)
mov EAX, EBP[-763];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-763];).store
mov EBP[-759], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 9;)
mov EAX, 9;
#generate_cmd_op.find_b:emit(mov EAX, 9;).store
mov EBP[-767], EAX;
#promote:emit(mov EAX, EBP[-759];)
mov EAX, EBP[-759];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-767];)
cmp EAX, EBP[-767];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-767];).store
mov EBP[-759], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-759];)
mov EAX, EBP[-759];
#generate_cmd_op.result1:emit(mov EAX, EBP[-759];).store
mov EBP[-167], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-775], EAX;)
mov EBP[-775], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-775];)
mov EAX, EBP[-775];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-775];).store
mov EBP[-771], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-771], CTRL;)
mov EBP[-771], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-771];)
mov EAX, EBP[-771];
#generate_cmd_op.result1:emit(mov EAX, EBP[-771];).store
mov EBP[-167], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-787], EAX;)
mov EBP[-787], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-787];)
mov EAX, EBP[-787];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-787];).store
mov EBP[-783], EAX;
#promote:emit(mov EAX, EBP[-783];)
mov EAX, EBP[-783];
#generate_cmd_op.op_str:emit(band EAX, CMP_G;)
band EAX, CMP_G;
#generate_cmd_op.op_str:emit(band EAX, CMP_G;).store
mov EBP[-783], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-783];)
mov EAX, EBP[-783];
#generate_cmd_op.result1:emit(mov EAX, EBP[-783];).store
mov EBP[-167], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-795], EAX;)
mov EBP[-795], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-795];)
mov EAX, EBP[-795];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-795];).store
mov EBP[-791], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-791];)
bnot EBP[-791];
#generate_cmd_op.result1:emit(mov EAX, EBP[-791];)
mov EAX, EBP[-791];
#generate_cmd_op.result1:emit(mov EAX, EBP[-791];).store
mov EBP[-167], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-803], EAX;)
mov EBP[-803], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-803];)
mov EAX, EBP[-803];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-803];).store
mov EBP[-799], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-799];)
bnot EBP[-799];
#generate_cmd_op.result1:emit(mov EAX, EBP[-799];)
mov EAX, EBP[-799];
#generate_cmd_op.result1:emit(mov EAX, EBP[-799];).store
mov EBP[-167], EAX;
#generate_code_block.lbl_to
:lbl_to_504:
#generate_code_block.exit
# End code block cb_502
#load_value.truncate1
mov EAX, EBP[-167];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-807], EAX;)
mov EBP[-807], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-807], EAX;)
cmp EBP[-807], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_1008__if_else;)
jz lbl_1008__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_507
#generate_code_block.lbl_from
:lbl_from_508:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_510 ] tmp_511
#generate_cmd_call.args:emit(push imm_510;)
push imm_510;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-175], eax;)
mov EBP[-175], eax;
#generate_code_block.lbl_to
:lbl_to_509:
#generate_code_block.exit
# End code block cb_507
#generate_cmd_if.end_then:emit(jmp lbl_1009__if_end;)
jmp lbl_1009__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_1008__if_else:)
:lbl_1008__if_else:
#generate_cmd_if.end_if:emit(:lbl_1009__if_end:)
:lbl_1009__if_end:
#generate_cmd.trace
# IR: IF cb_512 tmp_516 cb_517
#generate_cmd_if.cb_cond
#generate_code_block.intro
# Begin code block cb_512
#generate_code_block.lbl_from
:lbl_from_513:
#generate_cmd.trace
# IR: OP LESS var_401__digit imm_515 tmp_516
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-819], EAX;)
mov EBP[-819], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-819];)
mov EAX, EBP[-819];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-819];).store
mov EBP[-815], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-823], EAX;
#promote:emit(mov EAX, EBP[-815];)
mov EAX, EBP[-815];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-823];)
cmp EAX, EBP[-823];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-823];).store
mov EBP[-815], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-815];)
mov EAX, EBP[-815];
#generate_cmd_op.result1:emit(mov EAX, EBP[-815];).store
mov EBP[-183], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-831], EAX;)
mov EBP[-831], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-831];)
mov EAX, EBP[-831];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-831];).store
mov EBP[-827], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-827], CTRL;)
mov EBP[-827], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-827];)
mov EAX, EBP[-827];
#generate_cmd_op.result1:emit(mov EAX, EBP[-827];).store
mov EBP[-183], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-843], EAX;)
mov EBP[-843], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-843];)
mov EAX, EBP[-843];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-843];).store
mov EBP[-839], EAX;
#promote:emit(mov EAX, EBP[-839];)
mov EAX, EBP[-839];
#generate_cmd_op.op_str:emit(band EAX, CMP_L;)
band EAX, CMP_L;
#generate_cmd_op.op_str:emit(band EAX, CMP_L;).store
mov EBP[-839], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-839];)
mov EAX, EBP[-839];
#generate_cmd_op.result1:emit(mov EAX, EBP[-839];).store
mov EBP[-183], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-851], EAX;)
mov EBP[-851], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-851];)
mov EAX, EBP[-851];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-851];).store
mov EBP[-847], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-847];)
bnot EBP[-847];
#generate_cmd_op.result1:emit(mov EAX, EBP[-847];)
mov EAX, EBP[-847];
#generate_cmd_op.result1:emit(mov EAX, EBP[-847];).store
mov EBP[-183], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-859], EAX;)
mov EBP[-859], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-859];)
mov EAX, EBP[-859];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-859];).store
mov EBP[-855], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-855];)
bnot EBP[-855];
#generate_cmd_op.result1:emit(mov EAX, EBP[-855];)
mov EAX, EBP[-855];
#generate_cmd_op.result1:emit(mov EAX, EBP[-855];).store
mov EBP[-183], EAX;
#generate_code_block.lbl_to
:lbl_to_514:
#generate_code_block.exit
# End code block cb_512
#load_value.truncate1
mov EAX, EBP[-183];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-863], EAX;)
mov EBP[-863], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_if.cmp:emit(cmp EBP[-863], EAX;)
cmp EBP[-863], EAX;
#generate_cmd_if.jz_else:emit(jz lbl_1024__if_else;)
jz lbl_1024__if_else;
#generate_cmd_if.cb_block
#generate_code_block.intro
# Begin code block cb_517
#generate_code_block.lbl_from
:lbl_from_518:
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_520 ] tmp_521
#generate_cmd_call.args:emit(push imm_520;)
push imm_520;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-191], eax;)
mov EBP[-191], eax;
#generate_code_block.lbl_to
:lbl_to_519:
#generate_code_block.exit
# End code block cb_517
#generate_cmd_if.end_then:emit(jmp lbl_1025__if_end;)
jmp lbl_1025__if_end;
#generate_cmd_if.lbl_else:emit(:lbl_1024__if_else:)
:lbl_1024__if_else:
#generate_cmd_if.end_if:emit(:lbl_1025__if_end:)
:lbl_1025__if_end:
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -867;)
sub ESP, -867;
#maybe_emit_func_ret(cb_397)
ret;
#generate_code_block.lbl_to
:lbl_to_399:
#generate_code_block.exit
# End code block cb_397
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_560
#generate_code_block.lbl_from
:func_18__prints:
#generate_cmd.trace
# IR: ENTER scp_563__NULL
#generate_cmd_enter:emit(sub ESP, 19;)
sub ESP, 19;
#generate_cmd.trace
# IR: CALL func_5__print [ imm_567 imm_566 imm_565 var_564__s ] tmp_568
#generate_cmd_call.args:emit(push EBP[9];)
push EBP[9];
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.call:emit(call func_5__print;)
call func_5__print;
#generate_cmd_call.stack:emit(add ESP, 16;)
add ESP, 16;
#generate_cmd_call.result:emit(mov EBP[-15], eax;)
mov EBP[-15], eax;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -19;)
sub ESP, -19;
#maybe_emit_func_ret(cb_560)
ret;
#generate_code_block.lbl_to
:lbl_to_562:
#generate_code_block.exit
# End code block cb_560
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_551
#generate_code_block.lbl_from
:func_17__printc:
#generate_cmd.trace
# IR: ENTER scp_554__NULL
#generate_cmd_enter:emit(sub ESP, 23;)
sub ESP, 23;
#generate_cmd.trace
# IR: CALL func_6__putch [ imm_558 imm_557 imm_556 var_555__ch ] tmp_559
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-19], EAX;)
mov EBP[-19], EAX;
#generate_cmd_call.args:emit(push EBP[-19];)
push EBP[-19];
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.args:emit(push 255;)
push 255;
#generate_cmd_call.call:emit(call func_6__putch;)
call func_6__putch;
#generate_cmd_call.stack:emit(add ESP, 16;)
add ESP, 16;
#generate_cmd_call.result:emit(mov EBP[-15], eax;)
mov EBP[-15], eax;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -23;)
sub ESP, -23;
#maybe_emit_func_ret(cb_551)
ret;
#generate_code_block.lbl_to
:lbl_to_553:
#generate_code_block.exit
# End code block cb_551
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_99
#generate_code_block.lbl_from
:func_110__dbg_print_si:
#generate_cmd.trace
# IR: ENTER scp_102__NULL
#generate_cmd_enter:emit(sub ESP, 23;)
sub ESP, 23;
#generate_cmd.trace
# IR: CALL func_18__prints [ var_104__S ] tmp_105
#generate_cmd_call.args:emit(push EBP[13];)
push EBP[13];
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-3], eax;)
mov EBP[-3], eax;
#generate_cmd.trace
# IR: CALL func_18__prints [ imm_106 ] tmp_107
#generate_cmd_call.args:emit(push imm_106;)
push imm_106;
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-11], eax;)
mov EBP[-11], eax;
#generate_cmd.trace
# IR: CALL func_13__dbg_print_num [ var_103__num ] tmp_108
#generate_cmd_call.args:emit(push EBP[9];)
push EBP[9];
#generate_cmd_call.call:emit(call func_13__dbg_print_num;)
call func_13__dbg_print_num;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-15], eax;)
mov EBP[-15], eax;
#generate_cmd.trace
# IR: CALL func_19__newline [ ] tmp_109
#generate_cmd_call.call:emit(call func_19__newline;)
call func_19__newline;
#generate_cmd_call.stack:emit(add ESP, 0;)
add ESP, 0;
#generate_cmd_call.result:emit(mov EBP[-19], eax;)
mov EBP[-19], eax;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -23;)
sub ESP, -23;
#maybe_emit_func_ret(cb_99)
ret;
#generate_code_block.lbl_to
:lbl_to_101:
#generate_code_block.exit
# End code block cb_99
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_332
#generate_code_block.lbl_from
:func_12__print_num:
#generate_cmd.trace
# IR: ENTER scp_335__NULL
#generate_cmd_enter:emit(sub ESP, 227;)
sub ESP, 227;
#generate_cmd.trace
# IR: MOV var_337__buff imm_338
#generate_cmd_mov:emit(mov EAX, imm_338;)
mov EAX, imm_338;
#generate_cmd_mov:emit(mov EAX, imm_338;).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: MOV var_339__buffI imm_340
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-11], EAX;
#generate_cmd.trace
# IR: MOV var_341__nums imm_342
#generate_cmd_mov:emit(mov EAX, imm_342;)
mov EAX, imm_342;
#generate_cmd_mov:emit(mov EAX, imm_342;).store
mov EBP[-19], EAX;
#generate_cmd.trace
# IR: WHILE cb_345 tmp_349 cb_350 lbl_343__while_next lbl_344__while_end
#generate_cmd_while.lbl_next:emit(:lbl_343__while_next:)
:lbl_343__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_345
#generate_code_block.lbl_from
:lbl_from_346:
#generate_cmd.trace
# IR: OP GREATER var_336__num imm_348 tmp_349
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-95], EAX;)
mov EBP[-95], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-95];)
mov EAX, EBP[-95];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-95];).store
mov EBP[-91], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_op.find_b:emit(mov EAX, 0;).store
mov EBP[-99], EAX;
#promote:emit(mov EAX, EBP[-91];)
mov EAX, EBP[-91];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-99];)
cmp EAX, EBP[-99];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-99];).store
mov EBP[-91], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-91];)
mov EAX, EBP[-91];
#generate_cmd_op.result1:emit(mov EAX, EBP[-91];).store
mov EBP[-31], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-107], EAX;)
mov EBP[-107], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-107];)
mov EAX, EBP[-107];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-107];).store
mov EBP[-103], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-103], CTRL;)
mov EBP[-103], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-103];)
mov EAX, EBP[-103];
#generate_cmd_op.result1:emit(mov EAX, EBP[-103];).store
mov EBP[-31], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-119], EAX;)
mov EBP[-119], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-119];)
mov EAX, EBP[-119];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-119];).store
mov EBP[-115], EAX;
#promote:emit(mov EAX, EBP[-115];)
mov EAX, EBP[-115];
#generate_cmd_op.op_str:emit(band EAX, CMP_G;)
band EAX, CMP_G;
#generate_cmd_op.op_str:emit(band EAX, CMP_G;).store
mov EBP[-115], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-115];)
mov EAX, EBP[-115];
#generate_cmd_op.result1:emit(mov EAX, EBP[-115];).store
mov EBP[-31], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-127], EAX;)
mov EBP[-127], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-127];)
mov EAX, EBP[-127];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-127];).store
mov EBP[-123], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-123];)
bnot EBP[-123];
#generate_cmd_op.result1:emit(mov EAX, EBP[-123];)
mov EAX, EBP[-123];
#generate_cmd_op.result1:emit(mov EAX, EBP[-123];).store
mov EBP[-31], EAX;
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-135], EAX;)
mov EBP[-135], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-135];)
mov EAX, EBP[-135];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-135];).store
mov EBP[-131], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-131];)
bnot EBP[-131];
#generate_cmd_op.result1:emit(mov EAX, EBP[-131];)
mov EAX, EBP[-131];
#generate_cmd_op.result1:emit(mov EAX, EBP[-131];).store
mov EBP[-31], EAX;
#generate_code_block.lbl_to
:lbl_to_347:
#generate_code_block.exit
# End code block cb_345
#load_value.truncate1
mov EAX, EBP[-31];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-139], EAX;)
mov EBP[-139], EAX;
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp EBP[-139], EAX;)
cmp EBP[-139], EAX;
#generate_cmd_while.jz_end:emit(jz lbl_344__while_end;)
jz lbl_344__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_350
#generate_code_block.lbl_from
:lbl_from_351:
#generate_cmd.trace
# IR: OP MOD var_336__num imm_354 tmp_355
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-147], EAX;)
mov EBP[-147], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-147];)
mov EAX, EBP[-147];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-147];).store
mov EBP[-143], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 10;)
mov EAX, 10;
#generate_cmd_op.find_b:emit(mov EAX, 10;).store
mov EBP[-151], EAX;
#promote:emit(mov EAX, EBP[-143];)
mov EAX, EBP[-143];
#generate_cmd_op.op_str:emit(mod EAX, EBP[-151];)
mod EAX, EBP[-151];
#generate_cmd_op.op_str:emit(mod EAX, EBP[-151];).store
mov EBP[-143], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-143];)
mov EAX, EBP[-143];
#generate_cmd_op.result1:emit(mov EAX, EBP[-143];).store
mov EBP[-43], EAX;
#generate_cmd.trace
# IR: MOV var_353__digit tmp_355
#load_value.truncate1
mov EAX, EBP[-43];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-155], EAX;)
mov EBP[-155], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-155];)
mov EAX, EBP[-155];
#generate_cmd_mov:emit(mov EAX, EBP[-155];).store
mov EBP[-35], EAX;
#generate_cmd.trace
# IR: OP DIV var_336__num imm_356 tmp_357
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-163], EAX;)
mov EBP[-163], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-163];)
mov EAX, EBP[-163];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-163];).store
mov EBP[-159], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 10;)
mov EAX, 10;
#generate_cmd_op.find_b:emit(mov EAX, 10;).store
mov EBP[-167], EAX;
#promote:emit(mov EAX, EBP[-159];)
mov EAX, EBP[-159];
#generate_cmd_op.op_str:emit(div EAX, EBP[-167];)
div EAX, EBP[-167];
#generate_cmd_op.op_str:emit(div EAX, EBP[-167];).store
mov EBP[-159], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-159];)
mov EAX, EBP[-159];
#generate_cmd_op.result1:emit(mov EAX, EBP[-159];).store
mov EBP[-51], EAX;
#generate_cmd.trace
# IR: MOV var_336__num tmp_357
#load_value.truncate1
mov EAX, EBP[-51];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-171], EAX;)
mov EBP[-171], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-171];)
mov EAX, EBP[-171];
#generate_cmd_mov:emit(mov EAX, EBP[-171];).store
mov EBP[9], EAX;
#generate_cmd.trace
# IR: OP INDEX var_341__nums var_353__digit tmp_359
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];).store
mov EBP[-175], EAX;
#load_value.truncate1
mov EAX, EBP[-35];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-183], EAX;)
mov EBP[-183], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-183];)
mov EAX, EBP[-183];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-183];).store
mov EBP[-179], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-179], EAX;
#promote:emit(mov EAX, EBP[-175];)
mov EAX, EBP[-175];
#generate_cmd_op.op_str:emit(add EAX, EBP[-179];)
add EAX, EBP[-179];
#generate_cmd_op.op_str:emit(add EAX, EBP[-179];).store
mov EBP[-175], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-175];)
mov EAX, EBP[-175];
#generate_cmd_op.result1:emit(mov EAX, EBP[-175];).store
mov EBP[-59], EAX;
#generate_cmd.trace
# IR: MOV var_358__ch tmp_359
#promote:emit(mov EAX, EBP[-59];)
mov EAX, EBP[-59];
#emit.needs_deref_3(tmp_359):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-191], EAX;)
mov EBP[-191], EAX;
#load_value.truncate1
mov EAX, EBP[-191];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-195], EAX;)
mov EBP[-195], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-195];)
mov EAX, EBP[-195];
#generate_cmd_mov:emit(mov EAX, EBP[-195];).store
mov EBP[-55], EAX;
#generate_cmd.trace
# IR: OP INDEX var_337__buff var_339__buffI tmp_360
#generate_cmd_op.arg1:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-3];).store
mov EBP[-199], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];).store
mov EBP[-203], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-203], EAX;
#promote:emit(mov EAX, EBP[-199];)
mov EAX, EBP[-199];
#generate_cmd_op.op_str:emit(add EAX, EBP[-203];)
add EAX, EBP[-203];
#generate_cmd_op.op_str:emit(add EAX, EBP[-203];).store
mov EBP[-199], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-199];)
mov EAX, EBP[-199];
#generate_cmd_op.result1:emit(mov EAX, EBP[-199];).store
mov EBP[-63], EAX;
#generate_cmd.trace
# IR: MOV tmp_360 var_358__ch
#load_value.truncate1
mov EAX, EBP[-55];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-211], EAX;)
mov EBP[-211], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-211];)
mov EAX, EBP[-211];
#generate_cmd_mov:emit(mov EAX, EBP[-211];).store_deref_3
mov EBX, EBP[-63];
#generate_cmd_mov:emit(mov EAX, EBP[-211];).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: OP INC var_339__buffI none tmp_361
#generate_cmd_op.result2:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.result2:emit(mov EAX, EBP[-11];).store
mov EBP[-67], EAX;
#generate_cmd_op.op_str:emit(inc EBP[-11];)
inc EBP[-11];
#generate_code_block.lbl_to
:lbl_to_352:
#generate_code_block.exit
# End code block cb_350
#generate_cmd_while.jmp_next:emit(jmp lbl_343__while_next;)
jmp lbl_343__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_344__while_end:)
:lbl_344__while_end:
#generate_cmd.trace
# IR: OP INDEX var_337__buff var_339__buffI tmp_362
#generate_cmd_op.arg1:emit(mov EAX, EBP[-3];)
mov EAX, EBP[-3];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-3];).store
mov EBP[-215], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-11];).store
mov EBP[-219], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-219], EAX;
#promote:emit(mov EAX, EBP[-215];)
mov EAX, EBP[-215];
#generate_cmd_op.op_str:emit(add EAX, EBP[-219];)
add EAX, EBP[-219];
#generate_cmd_op.op_str:emit(add EAX, EBP[-219];).store
mov EBP[-215], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-215];)
mov EAX, EBP[-215];
#generate_cmd_op.result1:emit(mov EAX, EBP[-215];).store
mov EBP[-71], EAX;
#generate_cmd.trace
# IR: MOV tmp_362 imm_363
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store_deref_3
mov EBX, EBP[-71];
#generate_cmd_mov:emit(mov EAX, 0;).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: CALL func_16__strrev [ var_337__buff ] tmp_364
#generate_cmd_call.args:emit(push EBP[-3];)
push EBP[-3];
#generate_cmd_call.call:emit(call func_16__strrev;)
call func_16__strrev;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-79], eax;)
mov EBP[-79], eax;
#generate_cmd.trace
# IR: CALL func_18__prints [ var_337__buff ] tmp_365
#generate_cmd_call.args:emit(push EBP[-3];)
push EBP[-3];
#generate_cmd_call.call:emit(call func_18__prints;)
call func_18__prints;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-83], eax;)
mov EBP[-83], eax;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -227;)
sub ESP, -227;
#maybe_emit_func_ret(cb_332)
ret;
#generate_code_block.lbl_to
:lbl_to_334:
#generate_code_block.exit
# End code block cb_332
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_153
#generate_code_block.lbl_from
:func_8__scr_push_byte:
#generate_cmd.trace
# IR: ENTER scp_156__NULL
#generate_cmd_enter:emit(sub ESP, 27;)
sub ESP, 27;
#generate_cmd.trace
# IR: OP INDEX var_21__adr_scr var_23__scr_I tmp_158
#generate_cmd_op.arg1:emit(mov EAX, *var_21__adr_scr;)
mov EAX, *var_21__adr_scr;
#generate_cmd_op.arg1:emit(mov EAX, *var_21__adr_scr;).store
mov EBP[-11], EAX;
#generate_cmd_op.find_b:emit(mov EAX, *var_23__scr_I;)
mov EAX, *var_23__scr_I;
#generate_cmd_op.find_b:emit(mov EAX, *var_23__scr_I;).store
mov EBP[-15], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-15], EAX;
#promote:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.op_str:emit(add EAX, EBP[-15];)
add EAX, EBP[-15];
#generate_cmd_op.op_str:emit(add EAX, EBP[-15];).store
mov EBP[-11], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.result1:emit(mov EAX, EBP[-11];).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: MOV tmp_158 var_157__b
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-23], EAX;)
mov EBP[-23], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-23];)
mov EAX, EBP[-23];
#generate_cmd_mov:emit(mov EAX, EBP[-23];).store_deref_3
mov EBX, EBP[-3];
#generate_cmd_mov:emit(mov EAX, EBP[-23];).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: OP INC var_23__scr_I none tmp_159
#generate_cmd_op.result2:emit(mov EAX, *var_23__scr_I;)
mov EAX, *var_23__scr_I;
#generate_cmd_op.result2:emit(mov EAX, *var_23__scr_I;).store
mov EBP[-7], EAX;
#generate_cmd_op.op_str:emit(inc *var_23__scr_I;)
inc *var_23__scr_I;
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -27;)
sub ESP, -27;
#maybe_emit_func_ret(cb_153)
ret;
#generate_code_block.lbl_to
:lbl_to_155:
#generate_code_block.exit
# End code block cb_153
#generate.referenced_cbs
#generate_code_block.intro
# Begin code block cb_522
#generate_code_block.lbl_from
:func_16__strrev:
#generate_cmd.trace
# IR: ENTER scp_525__NULL
#generate_cmd_enter:emit(sub ESP, 199;)
sub ESP, 199;
#generate_cmd.trace
# IR: MOV var_527__sw imm_528
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: CALL func_11__strlen [ var_526__buff ] tmp_530
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-67], EAX;)
mov EBP[-67], EAX;
#generate_cmd_call.args:emit(push EBP[-67];)
push EBP[-67];
#generate_cmd_call.call:emit(call func_11__strlen;)
call func_11__strlen;
#generate_cmd_call.stack:emit(add ESP, 4;)
add ESP, 4;
#generate_cmd_call.result:emit(mov EBP[-15], eax;)
mov EBP[-15], eax;
#generate_cmd.trace
# IR: MOV var_529__len tmp_530
#load_value.truncate1
mov EAX, EBP[-15];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-71], EAX;)
mov EBP[-71], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-71];)
mov EAX, EBP[-71];
#generate_cmd_mov:emit(mov EAX, EBP[-71];).store
mov EBP[-11], EAX;
#generate_cmd.trace
# IR: MOV var_531__idx_1 imm_532
#generate_cmd_mov:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_mov:emit(mov EAX, 0;).store
mov EBP[-19], EAX;
#generate_cmd.trace
# IR: OP SUB var_529__len imm_534 tmp_535
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];)
mov EAX, EBP[-11];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-11];).store
mov EBP[-75], EAX;
#generate_cmd_op.find_b:emit(mov EAX, 1;)
mov EAX, 1;
#generate_cmd_op.find_b:emit(mov EAX, 1;).store
mov EBP[-79], EAX;
#promote:emit(mov EAX, EBP[-75];)
mov EAX, EBP[-75];
#generate_cmd_op.op_str:emit(sub EAX, EBP[-79];)
sub EAX, EBP[-79];
#generate_cmd_op.op_str:emit(sub EAX, EBP[-79];).store
mov EBP[-75], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-75];)
mov EAX, EBP[-75];
#generate_cmd_op.result1:emit(mov EAX, EBP[-75];).store
mov EBP[-35], EAX;
#generate_cmd.trace
# IR: MOV var_533__idx_2 tmp_535
#generate_cmd_mov:emit(mov EAX, EBP[-35];)
mov EAX, EBP[-35];
#generate_cmd_mov:emit(mov EAX, EBP[-35];).store
mov EBP[-27], EAX;
#generate_cmd.trace
# IR: WHILE cb_538 tmp_541 cb_542 lbl_536__while_next lbl_537__while_end
#generate_cmd_while.lbl_next:emit(:lbl_536__while_next:)
:lbl_536__while_next:
#generate_cmd_while.cb_cond
#generate_code_block.intro
# Begin code block cb_538
#generate_code_block.lbl_from
:lbl_from_539:
#generate_cmd.trace
# IR: OP LESS var_531__idx_1 var_533__idx_2 tmp_541
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];).store
mov EBP[-87], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-27];)
mov EAX, EBP[-27];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-27];).store
mov EBP[-91], EAX;
#promote:emit(mov EAX, EBP[-87];)
mov EAX, EBP[-87];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-91];)
cmp EAX, EBP[-91];
#generate_cmd_op.op_str:emit(cmp EAX, EBP[-91];).store
mov EBP[-87], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-87];)
mov EAX, EBP[-87];
#generate_cmd_op.result1:emit(mov EAX, EBP[-87];).store
mov EBP[-39], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];).store
mov EBP[-95], EAX;
#generate_cmd_op.op_str:emit(mov EBP[-95], CTRL;)
mov EBP[-95], CTRL;
#generate_cmd_op.result1:emit(mov EAX, EBP[-95];)
mov EAX, EBP[-95];
#generate_cmd_op.result1:emit(mov EAX, EBP[-95];).store
mov EBP[-39], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];).store
mov EBP[-103], EAX;
#promote:emit(mov EAX, EBP[-103];)
mov EAX, EBP[-103];
#generate_cmd_op.op_str:emit(band EAX, CMP_L;)
band EAX, CMP_L;
#generate_cmd_op.op_str:emit(band EAX, CMP_L;).store
mov EBP[-103], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-103];)
mov EAX, EBP[-103];
#generate_cmd_op.result1:emit(mov EAX, EBP[-103];).store
mov EBP[-39], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];).store
mov EBP[-107], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-107];)
bnot EBP[-107];
#generate_cmd_op.result1:emit(mov EAX, EBP[-107];)
mov EAX, EBP[-107];
#generate_cmd_op.result1:emit(mov EAX, EBP[-107];).store
mov EBP[-39], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-19];).store
mov EBP[-111], EAX;
#generate_cmd_op.op_str:emit(bnot EBP[-111];)
bnot EBP[-111];
#generate_cmd_op.result1:emit(mov EAX, EBP[-111];)
mov EAX, EBP[-111];
#generate_cmd_op.result1:emit(mov EAX, EBP[-111];).store
mov EBP[-39], EAX;
#generate_code_block.lbl_to
:lbl_to_540:
#generate_code_block.exit
# End code block cb_538
#promote:emit(mov EAX, 0;)
mov EAX, 0;
#generate_cmd_while.cmp:emit(cmp EBP[-39], EAX;)
cmp EBP[-39], EAX;
#generate_cmd_while.jz_end:emit(jz lbl_537__while_end;)
jz lbl_537__while_end;
#generate_cmd_while.cb_block
#generate_code_block.intro
# Begin code block cb_542
#generate_code_block.lbl_from
:lbl_from_543:
#generate_cmd.trace
# IR: OP INDEX var_526__buff var_531__idx_1 tmp_545
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-119], EAX;)
mov EBP[-119], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-119];)
mov EAX, EBP[-119];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-119];).store
mov EBP[-115], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-19];).store
mov EBP[-123], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-123], EAX;
#promote:emit(mov EAX, EBP[-115];)
mov EAX, EBP[-115];
#generate_cmd_op.op_str:emit(add EAX, EBP[-123];)
add EAX, EBP[-123];
#generate_cmd_op.op_str:emit(add EAX, EBP[-123];).store
mov EBP[-115], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-115];)
mov EAX, EBP[-115];
#generate_cmd_op.result1:emit(mov EAX, EBP[-115];).store
mov EBP[-43], EAX;
#generate_cmd.trace
# IR: MOV var_527__sw tmp_545
#promote:emit(mov EAX, EBP[-43];)
mov EAX, EBP[-43];
#emit.needs_deref_3(tmp_545):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-131], EAX;)
mov EBP[-131], EAX;
#load_value.truncate1
mov EAX, EBP[-131];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-135], EAX;)
mov EBP[-135], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-135];)
mov EAX, EBP[-135];
#generate_cmd_mov:emit(mov EAX, EBP[-135];).store
mov EBP[-3], EAX;
#generate_cmd.trace
# IR: OP INDEX var_526__buff var_531__idx_1 tmp_546
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-143], EAX;)
mov EBP[-143], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-143];)
mov EAX, EBP[-143];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-143];).store
mov EBP[-139], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-19];).store
mov EBP[-147], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-147], EAX;
#promote:emit(mov EAX, EBP[-139];)
mov EAX, EBP[-139];
#generate_cmd_op.op_str:emit(add EAX, EBP[-147];)
add EAX, EBP[-147];
#generate_cmd_op.op_str:emit(add EAX, EBP[-147];).store
mov EBP[-139], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-139];)
mov EAX, EBP[-139];
#generate_cmd_op.result1:emit(mov EAX, EBP[-139];).store
mov EBP[-47], EAX;
#generate_cmd.trace
# IR: OP INDEX var_526__buff var_533__idx_2 tmp_547
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-159], EAX;)
mov EBP[-159], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-159];)
mov EAX, EBP[-159];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-159];).store
mov EBP[-155], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-27];)
mov EAX, EBP[-27];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-27];).store
mov EBP[-163], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-163], EAX;
#promote:emit(mov EAX, EBP[-155];)
mov EAX, EBP[-155];
#generate_cmd_op.op_str:emit(add EAX, EBP[-163];)
add EAX, EBP[-163];
#generate_cmd_op.op_str:emit(add EAX, EBP[-163];).store
mov EBP[-155], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-155];)
mov EAX, EBP[-155];
#generate_cmd_op.result1:emit(mov EAX, EBP[-155];).store
mov EBP[-51], EAX;
#generate_cmd.trace
# IR: MOV tmp_546 tmp_547
#promote:emit(mov EAX, EBP[-51];)
mov EAX, EBP[-51];
#emit.needs_deref_3(tmp_547):emit(mov EAX, *EAX;)
mov EAX, *EAX;
#demote:emit(mov EBP[-171], EAX;)
mov EBP[-171], EAX;
#load_value.truncate1
mov EAX, EBP[-171];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-175], EAX;)
mov EBP[-175], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-175];)
mov EAX, EBP[-175];
#generate_cmd_mov:emit(mov EAX, EBP[-175];).store_deref_3
mov EBX, EBP[-47];
#generate_cmd_mov:emit(mov EAX, EBP[-175];).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: OP INDEX var_526__buff var_533__idx_2 tmp_548
#load_value.truncate1
mov EAX, EBP[9];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-183], EAX;)
mov EBP[-183], EAX;
#generate_cmd_op.arg1:emit(mov EAX, EBP[-183];)
mov EAX, EBP[-183];
#generate_cmd_op.arg1:emit(mov EAX, EBP[-183];).store
mov EBP[-179], EAX;
#generate_cmd_op.find_b:emit(mov EAX, EBP[-27];)
mov EAX, EBP[-27];
#generate_cmd_op.find_b:emit(mov EAX, EBP[-27];).store
mov EBP[-187], EAX;
#generate_cmd_op.index_step:emit(mul EAX, 1;)
mul EAX, 1;
#generate_cmd_op.index_step:emit(mul EAX, 1;).store
mov EBP[-187], EAX;
#promote:emit(mov EAX, EBP[-179];)
mov EAX, EBP[-179];
#generate_cmd_op.op_str:emit(add EAX, EBP[-187];)
add EAX, EBP[-187];
#generate_cmd_op.op_str:emit(add EAX, EBP[-187];).store
mov EBP[-179], EAX;
#generate_cmd_op.result1:emit(mov EAX, EBP[-179];)
mov EAX, EBP[-179];
#generate_cmd_op.result1:emit(mov EAX, EBP[-179];).store
mov EBP[-55], EAX;
#generate_cmd.trace
# IR: MOV tmp_548 var_527__sw
#load_value.truncate1
mov EAX, EBP[-3];
#load_value.truncate2
band EAX, 255;
#load_value.truncate3:emit(mov EBP[-195], EAX;)
mov EBP[-195], EAX;
#generate_cmd_mov:emit(mov EAX, EBP[-195];)
mov EAX, EBP[-195];
#generate_cmd_mov:emit(mov EAX, EBP[-195];).store_deref_3
mov EBX, EBP[-55];
#generate_cmd_mov:emit(mov EAX, EBP[-195];).store_deref_4
mov *EBX, EAX;
#generate_cmd.trace
# IR: OP INC var_531__idx_1 none tmp_549
#generate_cmd_op.result2:emit(mov EAX, EBP[-19];)
mov EAX, EBP[-19];
#generate_cmd_op.result2:emit(mov EAX, EBP[-19];).store
mov EBP[-59], EAX;
#generate_cmd_op.op_str:emit(inc EBP[-19];)
inc EBP[-19];
#generate_cmd.trace
# IR: OP DEC var_533__idx_2 none tmp_550
#generate_cmd_op.result2:emit(mov EAX, EBP[-27];)
mov EAX, EBP[-27];
#generate_cmd_op.result2:emit(mov EAX, EBP[-27];).store
mov EBP[-63], EAX;
#generate_cmd_op.op_str:emit(dec EBP[-27];)
dec EBP[-27];
#generate_code_block.lbl_to
:lbl_to_544:
#generate_code_block.exit
# End code block cb_542
#generate_cmd_while.jmp_next:emit(jmp lbl_536__while_next;)
jmp lbl_536__while_next;
#generate_cmd_while.lbl_end:emit(:lbl_537__while_end:)
:lbl_537__while_end:
#generate_cmd.trace
# IR: LEAVE
#generate_cmd_leave:emit(sub ESP, -199;)
sub ESP, -199;
#maybe_emit_func_ret(cb_522)
ret;
#generate_code_block.lbl_to
:lbl_to_524:
#generate_code_block.exit
# End code block cb_522
:var_21__adr_scr: db 0;
:var_23__scr_I: db 0;
:var_25__alloc_p: db 0;
:var_27__n_tiles_x: db 0;
:var_29__n_tiles_y: db 0;
:tmp_31: db 0;
:imm_32: db "END PROGRAM", 0;
:tmp_36: db 0;
:tmp_37: db 0;
:imm_42: db "Hello World!", 0;
:imm_50: db "%s", 0;
:imm_57: db "world", 0;
:imm_61: db "x %s \n", 0;
:imm_65: db "\n", 0;
:imm_67: db "strlen( /n ) = %d\n", 0;
:imm_69: db "Okay.\n", 0;
:imm_89: db "[", 0;
:imm_92: db "]: [", 0;
:imm_95: db "]", 0;
:imm_106: db "=", 0;
:imm_225: db " I", 0;
:imm_229: db " c2", 0;
:imm_237: db " c", 0;
:imm_239: db " %[0]", 0;
:imm_240: db "%", 0;
:imm_245: db "%", 0;
:imm_250: db "\", 0;
:imm_256: db " is_perc", 0;
:imm_258: db " is_bsl", 0;
:imm_270: db "s", 0;
:imm_284: db "d", 0;
:imm_298: db "n", 0;
:imm_338: db "aaaaaaaaaaa", 0;
:imm_342: db "0123456789", 0;
:imm_410: db "0", 0;
:imm_420: db "1", 0;
:imm_430: db "2", 0;
:imm_440: db "3", 0;
:imm_450: db "4", 0;
:imm_460: db "5", 0;
:imm_470: db "6", 0;
:imm_480: db "7", 0;
:imm_490: db "8", 0;
:imm_500: db "9", 0;
:imm_510: db "H", 0;
:imm_520: db "L", 0;
